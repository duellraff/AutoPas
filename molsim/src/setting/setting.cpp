// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "setting.h"

// thermo_target_t
// 

const thermo_target_t::target_type& thermo_target_t::
target () const
{
  return this->target_.get ();
}

thermo_target_t::target_type& thermo_target_t::
target ()
{
  return this->target_.get ();
}

void thermo_target_t::
target (const target_type& x)
{
  this->target_.set (x);
}

const thermo_target_t::temperature_step_type& thermo_target_t::
temperature_step () const
{
  return this->temperature_step_.get ();
}

thermo_target_t::temperature_step_type& thermo_target_t::
temperature_step ()
{
  return this->temperature_step_.get ();
}

void thermo_target_t::
temperature_step (const temperature_step_type& x)
{
  this->temperature_step_.set (x);
}

const thermo_target_t::timestep_type& thermo_target_t::
timestep () const
{
  return this->timestep_.get ();
}

thermo_target_t::timestep_type& thermo_target_t::
timestep ()
{
  return this->timestep_.get ();
}

void thermo_target_t::
timestep (const timestep_type& x)
{
  this->timestep_.set (x);
}


// thermo_t
// 

const thermo_t::initial_type& thermo_t::
initial () const
{
  return this->initial_.get ();
}

thermo_t::initial_type& thermo_t::
initial ()
{
  return this->initial_.get ();
}

void thermo_t::
initial (const initial_type& x)
{
  this->initial_.set (x);
}

const thermo_t::timestep_type& thermo_t::
timestep () const
{
  return this->timestep_.get ();
}

thermo_t::timestep_type& thermo_t::
timestep ()
{
  return this->timestep_.get ();
}

void thermo_t::
timestep (const timestep_type& x)
{
  this->timestep_.set (x);
}

const thermo_t::heating_optional& thermo_t::
heating () const
{
  return this->heating_;
}

thermo_t::heating_optional& thermo_t::
heating ()
{
  return this->heating_;
}

void thermo_t::
heating (const heating_type& x)
{
  this->heating_.set (x);
}

void thermo_t::
heating (const heating_optional& x)
{
  this->heating_ = x;
}

void thermo_t::
heating (::std::unique_ptr< heating_type > x)
{
  this->heating_.set (std::move (x));
}

const thermo_t::ignoreY_optional& thermo_t::
ignoreY () const
{
  return this->ignoreY_;
}

thermo_t::ignoreY_optional& thermo_t::
ignoreY ()
{
  return this->ignoreY_;
}

void thermo_t::
ignoreY (const ignoreY_type& x)
{
  this->ignoreY_.set (x);
}

void thermo_t::
ignoreY (const ignoreY_optional& x)
{
  this->ignoreY_ = x;
}


// setting_t
// 

const setting_t::outputname_type& setting_t::
outputname () const
{
  return this->outputname_.get ();
}

setting_t::outputname_type& setting_t::
outputname ()
{
  return this->outputname_.get ();
}

void setting_t::
outputname (const outputname_type& x)
{
  this->outputname_.set (x);
}

void setting_t::
outputname (::std::unique_ptr< outputname_type > x)
{
  this->outputname_.set (std::move (x));
}

const setting_t::endfile_optional& setting_t::
endfile () const
{
  return this->endfile_;
}

setting_t::endfile_optional& setting_t::
endfile ()
{
  return this->endfile_;
}

void setting_t::
endfile (const endfile_type& x)
{
  this->endfile_.set (x);
}

void setting_t::
endfile (const endfile_optional& x)
{
  this->endfile_ = x;
}

void setting_t::
endfile (::std::unique_ptr< endfile_type > x)
{
  this->endfile_.set (std::move (x));
}

const setting_t::frequency_type& setting_t::
frequency () const
{
  return this->frequency_.get ();
}

setting_t::frequency_type& setting_t::
frequency ()
{
  return this->frequency_.get ();
}

void setting_t::
frequency (const frequency_type& x)
{
  this->frequency_.set (x);
}

const setting_t::profileFile_optional& setting_t::
profileFile () const
{
  return this->profileFile_;
}

setting_t::profileFile_optional& setting_t::
profileFile ()
{
  return this->profileFile_;
}

void setting_t::
profileFile (const profileFile_type& x)
{
  this->profileFile_.set (x);
}

void setting_t::
profileFile (const profileFile_optional& x)
{
  this->profileFile_ = x;
}

void setting_t::
profileFile (::std::unique_ptr< profileFile_type > x)
{
  this->profileFile_.set (std::move (x));
}

const setting_t::profileBucketsX_optional& setting_t::
profileBucketsX () const
{
  return this->profileBucketsX_;
}

setting_t::profileBucketsX_optional& setting_t::
profileBucketsX ()
{
  return this->profileBucketsX_;
}

void setting_t::
profileBucketsX (const profileBucketsX_type& x)
{
  this->profileBucketsX_.set (x);
}

void setting_t::
profileBucketsX (const profileBucketsX_optional& x)
{
  this->profileBucketsX_ = x;
}

const setting_t::delta_t_type& setting_t::
delta_t () const
{
  return this->delta_t_.get ();
}

setting_t::delta_t_type& setting_t::
delta_t ()
{
  return this->delta_t_.get ();
}

void setting_t::
delta_t (const delta_t_type& x)
{
  this->delta_t_.set (x);
}

const setting_t::t_end_type& setting_t::
t_end () const
{
  return this->t_end_.get ();
}

setting_t::t_end_type& setting_t::
t_end ()
{
  return this->t_end_.get ();
}

void setting_t::
t_end (const t_end_type& x)
{
  this->t_end_.set (x);
}

const setting_t::b_factor_type& setting_t::
b_factor () const
{
  return this->b_factor_.get ();
}

setting_t::b_factor_type& setting_t::
b_factor ()
{
  return this->b_factor_.get ();
}

void setting_t::
b_factor (const b_factor_type& x)
{
  this->b_factor_.set (x);
}

const setting_t::g_grav_x_type& setting_t::
g_grav_x () const
{
  return this->g_grav_x_.get ();
}

setting_t::g_grav_x_type& setting_t::
g_grav_x ()
{
  return this->g_grav_x_.get ();
}

void setting_t::
g_grav_x (const g_grav_x_type& x)
{
  this->g_grav_x_.set (x);
}

const setting_t::g_grav_y_type& setting_t::
g_grav_y () const
{
  return this->g_grav_y_.get ();
}

setting_t::g_grav_y_type& setting_t::
g_grav_y ()
{
  return this->g_grav_y_.get ();
}

void setting_t::
g_grav_y (const g_grav_y_type& x)
{
  this->g_grav_y_.set (x);
}

const setting_t::g_grav_z_type& setting_t::
g_grav_z () const
{
  return this->g_grav_z_.get ();
}

setting_t::g_grav_z_type& setting_t::
g_grav_z ()
{
  return this->g_grav_z_.get ();
}

void setting_t::
g_grav_z (const g_grav_z_type& x)
{
  this->g_grav_z_.set (x);
}

const setting_t::domainX_type& setting_t::
domainX () const
{
  return this->domainX_.get ();
}

setting_t::domainX_type& setting_t::
domainX ()
{
  return this->domainX_.get ();
}

void setting_t::
domainX (const domainX_type& x)
{
  this->domainX_.set (x);
}

const setting_t::domainY_type& setting_t::
domainY () const
{
  return this->domainY_.get ();
}

setting_t::domainY_type& setting_t::
domainY ()
{
  return this->domainY_.get ();
}

void setting_t::
domainY (const domainY_type& x)
{
  this->domainY_.set (x);
}

const setting_t::domainZ_type& setting_t::
domainZ () const
{
  return this->domainZ_.get ();
}

setting_t::domainZ_type& setting_t::
domainZ ()
{
  return this->domainZ_.get ();
}

void setting_t::
domainZ (const domainZ_type& x)
{
  this->domainZ_.set (x);
}

const setting_t::r_cutoff_type& setting_t::
r_cutoff () const
{
  return this->r_cutoff_.get ();
}

setting_t::r_cutoff_type& setting_t::
r_cutoff ()
{
  return this->r_cutoff_.get ();
}

void setting_t::
r_cutoff (const r_cutoff_type& x)
{
  this->r_cutoff_.set (x);
}

const setting_t::ContainerType_optional& setting_t::
ContainerType () const
{
  return this->ContainerType_;
}

setting_t::ContainerType_optional& setting_t::
ContainerType ()
{
  return this->ContainerType_;
}

void setting_t::
ContainerType (const ContainerType_type& x)
{
  this->ContainerType_.set (x);
}

void setting_t::
ContainerType (const ContainerType_optional& x)
{
  this->ContainerType_ = x;
}

const setting_t::ForceComputationMethod_optional& setting_t::
ForceComputationMethod () const
{
  return this->ForceComputationMethod_;
}

setting_t::ForceComputationMethod_optional& setting_t::
ForceComputationMethod ()
{
  return this->ForceComputationMethod_;
}

void setting_t::
ForceComputationMethod (const ForceComputationMethod_type& x)
{
  this->ForceComputationMethod_.set (x);
}

void setting_t::
ForceComputationMethod (const ForceComputationMethod_optional& x)
{
  this->ForceComputationMethod_ = x;
}

const setting_t::bc_left_type& setting_t::
bc_left () const
{
  return this->bc_left_.get ();
}

setting_t::bc_left_type& setting_t::
bc_left ()
{
  return this->bc_left_.get ();
}

void setting_t::
bc_left (const bc_left_type& x)
{
  this->bc_left_.set (x);
}

const setting_t::bc_upper_type& setting_t::
bc_upper () const
{
  return this->bc_upper_.get ();
}

setting_t::bc_upper_type& setting_t::
bc_upper ()
{
  return this->bc_upper_.get ();
}

void setting_t::
bc_upper (const bc_upper_type& x)
{
  this->bc_upper_.set (x);
}

const setting_t::bc_right_type& setting_t::
bc_right () const
{
  return this->bc_right_.get ();
}

setting_t::bc_right_type& setting_t::
bc_right ()
{
  return this->bc_right_.get ();
}

void setting_t::
bc_right (const bc_right_type& x)
{
  this->bc_right_.set (x);
}

const setting_t::bc_lower_type& setting_t::
bc_lower () const
{
  return this->bc_lower_.get ();
}

setting_t::bc_lower_type& setting_t::
bc_lower ()
{
  return this->bc_lower_.get ();
}

void setting_t::
bc_lower (const bc_lower_type& x)
{
  this->bc_lower_.set (x);
}

const setting_t::bc_front_type& setting_t::
bc_front () const
{
  return this->bc_front_.get ();
}

setting_t::bc_front_type& setting_t::
bc_front ()
{
  return this->bc_front_.get ();
}

void setting_t::
bc_front (const bc_front_type& x)
{
  this->bc_front_.set (x);
}

const setting_t::bc_back_type& setting_t::
bc_back () const
{
  return this->bc_back_.get ();
}

setting_t::bc_back_type& setting_t::
bc_back ()
{
  return this->bc_back_.get ();
}

void setting_t::
bc_back (const bc_back_type& x)
{
  this->bc_back_.set (x);
}

const setting_t::inputfiles_sequence& setting_t::
inputfiles () const
{
  return this->inputfiles_;
}

setting_t::inputfiles_sequence& setting_t::
inputfiles ()
{
  return this->inputfiles_;
}

void setting_t::
inputfiles (const inputfiles_sequence& s)
{
  this->inputfiles_ = s;
}

const setting_t::thermostat_optional& setting_t::
thermostat () const
{
  return this->thermostat_;
}

setting_t::thermostat_optional& setting_t::
thermostat ()
{
  return this->thermostat_;
}

void setting_t::
thermostat (const thermostat_type& x)
{
  this->thermostat_.set (x);
}

void setting_t::
thermostat (const thermostat_optional& x)
{
  this->thermostat_ = x;
}

void setting_t::
thermostat (::std::unique_ptr< thermostat_type > x)
{
  this->thermostat_.set (std::move (x));
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// thermo_target_t
//

thermo_target_t::
thermo_target_t (const target_type& target,
                 const temperature_step_type& temperature_step,
                 const timestep_type& timestep)
: ::xml_schema::type (),
  target_ (target, this),
  temperature_step_ (temperature_step, this),
  timestep_ (timestep, this)
{
}

thermo_target_t::
thermo_target_t (const thermo_target_t& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  target_ (x.target_, f, this),
  temperature_step_ (x.temperature_step_, f, this),
  timestep_ (x.timestep_, f, this)
{
}

thermo_target_t::
thermo_target_t (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  target_ (this),
  temperature_step_ (this),
  timestep_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void thermo_target_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // target
    //
    if (n.name () == "target" && n.namespace_ ().empty ())
    {
      if (!target_.present ())
      {
        this->target_.set (target_traits::create (i, f, this));
        continue;
      }
    }

    // temperature_step
    //
    if (n.name () == "temperature_step" && n.namespace_ ().empty ())
    {
      if (!temperature_step_.present ())
      {
        this->temperature_step_.set (temperature_step_traits::create (i, f, this));
        continue;
      }
    }

    // timestep
    //
    if (n.name () == "timestep" && n.namespace_ ().empty ())
    {
      if (!timestep_.present ())
      {
        this->timestep_.set (timestep_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!target_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "target",
      "");
  }

  if (!temperature_step_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "temperature_step",
      "");
  }

  if (!timestep_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "timestep",
      "");
  }
}

thermo_target_t* thermo_target_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class thermo_target_t (*this, f, c);
}

thermo_target_t& thermo_target_t::
operator= (const thermo_target_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->target_ = x.target_;
    this->temperature_step_ = x.temperature_step_;
    this->timestep_ = x.timestep_;
  }

  return *this;
}

thermo_target_t::
~thermo_target_t ()
{
}

// thermo_t
//

thermo_t::
thermo_t (const initial_type& initial,
          const timestep_type& timestep)
: ::xml_schema::type (),
  initial_ (initial, this),
  timestep_ (timestep, this),
  heating_ (this),
  ignoreY_ (this)
{
}

thermo_t::
thermo_t (const thermo_t& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  initial_ (x.initial_, f, this),
  timestep_ (x.timestep_, f, this),
  heating_ (x.heating_, f, this),
  ignoreY_ (x.ignoreY_, f, this)
{
}

thermo_t::
thermo_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  initial_ (this),
  timestep_ (this),
  heating_ (this),
  ignoreY_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void thermo_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // initial
    //
    if (n.name () == "initial" && n.namespace_ ().empty ())
    {
      if (!initial_.present ())
      {
        this->initial_.set (initial_traits::create (i, f, this));
        continue;
      }
    }

    // timestep
    //
    if (n.name () == "timestep" && n.namespace_ ().empty ())
    {
      if (!timestep_.present ())
      {
        this->timestep_.set (timestep_traits::create (i, f, this));
        continue;
      }
    }

    // heating
    //
    if (n.name () == "heating" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< heating_type > r (
        heating_traits::create (i, f, this));

      if (!this->heating_)
      {
        this->heating_.set (::std::move (r));
        continue;
      }
    }

    // ignoreY
    //
    if (n.name () == "ignoreY" && n.namespace_ ().empty ())
    {
      if (!this->ignoreY_)
      {
        this->ignoreY_.set (ignoreY_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!initial_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "initial",
      "");
  }

  if (!timestep_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "timestep",
      "");
  }
}

thermo_t* thermo_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class thermo_t (*this, f, c);
}

thermo_t& thermo_t::
operator= (const thermo_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->initial_ = x.initial_;
    this->timestep_ = x.timestep_;
    this->heating_ = x.heating_;
    this->ignoreY_ = x.ignoreY_;
  }

  return *this;
}

thermo_t::
~thermo_t ()
{
}

// setting_t
//

setting_t::
setting_t (const outputname_type& outputname,
           const frequency_type& frequency,
           const delta_t_type& delta_t,
           const t_end_type& t_end,
           const b_factor_type& b_factor,
           const g_grav_x_type& g_grav_x,
           const g_grav_y_type& g_grav_y,
           const g_grav_z_type& g_grav_z,
           const domainX_type& domainX,
           const domainY_type& domainY,
           const domainZ_type& domainZ,
           const r_cutoff_type& r_cutoff,
           const bc_left_type& bc_left,
           const bc_upper_type& bc_upper,
           const bc_right_type& bc_right,
           const bc_lower_type& bc_lower,
           const bc_front_type& bc_front,
           const bc_back_type& bc_back)
: ::xml_schema::type (),
  outputname_ (outputname, this),
  endfile_ (this),
  frequency_ (frequency, this),
  profileFile_ (this),
  profileBucketsX_ (this),
  delta_t_ (delta_t, this),
  t_end_ (t_end, this),
  b_factor_ (b_factor, this),
  g_grav_x_ (g_grav_x, this),
  g_grav_y_ (g_grav_y, this),
  g_grav_z_ (g_grav_z, this),
  domainX_ (domainX, this),
  domainY_ (domainY, this),
  domainZ_ (domainZ, this),
  r_cutoff_ (r_cutoff, this),
  ContainerType_ (this),
  ForceComputationMethod_ (this),
  bc_left_ (bc_left, this),
  bc_upper_ (bc_upper, this),
  bc_right_ (bc_right, this),
  bc_lower_ (bc_lower, this),
  bc_front_ (bc_front, this),
  bc_back_ (bc_back, this),
  inputfiles_ (this),
  thermostat_ (this)
{
}

setting_t::
setting_t (const setting_t& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  outputname_ (x.outputname_, f, this),
  endfile_ (x.endfile_, f, this),
  frequency_ (x.frequency_, f, this),
  profileFile_ (x.profileFile_, f, this),
  profileBucketsX_ (x.profileBucketsX_, f, this),
  delta_t_ (x.delta_t_, f, this),
  t_end_ (x.t_end_, f, this),
  b_factor_ (x.b_factor_, f, this),
  g_grav_x_ (x.g_grav_x_, f, this),
  g_grav_y_ (x.g_grav_y_, f, this),
  g_grav_z_ (x.g_grav_z_, f, this),
  domainX_ (x.domainX_, f, this),
  domainY_ (x.domainY_, f, this),
  domainZ_ (x.domainZ_, f, this),
  r_cutoff_ (x.r_cutoff_, f, this),
  ContainerType_ (x.ContainerType_, f, this),
  ForceComputationMethod_ (x.ForceComputationMethod_, f, this),
  bc_left_ (x.bc_left_, f, this),
  bc_upper_ (x.bc_upper_, f, this),
  bc_right_ (x.bc_right_, f, this),
  bc_lower_ (x.bc_lower_, f, this),
  bc_front_ (x.bc_front_, f, this),
  bc_back_ (x.bc_back_, f, this),
  inputfiles_ (x.inputfiles_, f, this),
  thermostat_ (x.thermostat_, f, this)
{
}

setting_t::
setting_t (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  outputname_ (this),
  endfile_ (this),
  frequency_ (this),
  profileFile_ (this),
  profileBucketsX_ (this),
  delta_t_ (this),
  t_end_ (this),
  b_factor_ (this),
  g_grav_x_ (this),
  g_grav_y_ (this),
  g_grav_z_ (this),
  domainX_ (this),
  domainY_ (this),
  domainZ_ (this),
  r_cutoff_ (this),
  ContainerType_ (this),
  ForceComputationMethod_ (this),
  bc_left_ (this),
  bc_upper_ (this),
  bc_right_ (this),
  bc_lower_ (this),
  bc_front_ (this),
  bc_back_ (this),
  inputfiles_ (this),
  thermostat_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void setting_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // outputname
    //
    if (n.name () == "outputname" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< outputname_type > r (
        outputname_traits::create (i, f, this));

      if (!outputname_.present ())
      {
        this->outputname_.set (::std::move (r));
        continue;
      }
    }

    // endfile
    //
    if (n.name () == "endfile" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< endfile_type > r (
        endfile_traits::create (i, f, this));

      if (!this->endfile_)
      {
        this->endfile_.set (::std::move (r));
        continue;
      }
    }

    // frequency
    //
    if (n.name () == "frequency" && n.namespace_ ().empty ())
    {
      if (!frequency_.present ())
      {
        this->frequency_.set (frequency_traits::create (i, f, this));
        continue;
      }
    }

    // profileFile
    //
    if (n.name () == "profileFile" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< profileFile_type > r (
        profileFile_traits::create (i, f, this));

      if (!this->profileFile_)
      {
        this->profileFile_.set (::std::move (r));
        continue;
      }
    }

    // profileBucketsX
    //
    if (n.name () == "profileBucketsX" && n.namespace_ ().empty ())
    {
      if (!this->profileBucketsX_)
      {
        this->profileBucketsX_.set (profileBucketsX_traits::create (i, f, this));
        continue;
      }
    }

    // delta_t
    //
    if (n.name () == "delta_t" && n.namespace_ ().empty ())
    {
      if (!delta_t_.present ())
      {
        this->delta_t_.set (delta_t_traits::create (i, f, this));
        continue;
      }
    }

    // t_end
    //
    if (n.name () == "t_end" && n.namespace_ ().empty ())
    {
      if (!t_end_.present ())
      {
        this->t_end_.set (t_end_traits::create (i, f, this));
        continue;
      }
    }

    // b_factor
    //
    if (n.name () == "b_factor" && n.namespace_ ().empty ())
    {
      if (!b_factor_.present ())
      {
        this->b_factor_.set (b_factor_traits::create (i, f, this));
        continue;
      }
    }

    // g_grav_x
    //
    if (n.name () == "g_grav_x" && n.namespace_ ().empty ())
    {
      if (!g_grav_x_.present ())
      {
        this->g_grav_x_.set (g_grav_x_traits::create (i, f, this));
        continue;
      }
    }

    // g_grav_y
    //
    if (n.name () == "g_grav_y" && n.namespace_ ().empty ())
    {
      if (!g_grav_y_.present ())
      {
        this->g_grav_y_.set (g_grav_y_traits::create (i, f, this));
        continue;
      }
    }

    // g_grav_z
    //
    if (n.name () == "g_grav_z" && n.namespace_ ().empty ())
    {
      if (!g_grav_z_.present ())
      {
        this->g_grav_z_.set (g_grav_z_traits::create (i, f, this));
        continue;
      }
    }

    // domainX
    //
    if (n.name () == "domainX" && n.namespace_ ().empty ())
    {
      if (!domainX_.present ())
      {
        this->domainX_.set (domainX_traits::create (i, f, this));
        continue;
      }
    }

    // domainY
    //
    if (n.name () == "domainY" && n.namespace_ ().empty ())
    {
      if (!domainY_.present ())
      {
        this->domainY_.set (domainY_traits::create (i, f, this));
        continue;
      }
    }

    // domainZ
    //
    if (n.name () == "domainZ" && n.namespace_ ().empty ())
    {
      if (!domainZ_.present ())
      {
        this->domainZ_.set (domainZ_traits::create (i, f, this));
        continue;
      }
    }

    // r_cutoff
    //
    if (n.name () == "r_cutoff" && n.namespace_ ().empty ())
    {
      if (!r_cutoff_.present ())
      {
        this->r_cutoff_.set (r_cutoff_traits::create (i, f, this));
        continue;
      }
    }

    // ContainerType
    //
    if (n.name () == "ContainerType" && n.namespace_ ().empty ())
    {
      if (!this->ContainerType_)
      {
        this->ContainerType_.set (ContainerType_traits::create (i, f, this));
        continue;
      }
    }

    // ForceComputationMethod
    //
    if (n.name () == "ForceComputationMethod" && n.namespace_ ().empty ())
    {
      if (!this->ForceComputationMethod_)
      {
        this->ForceComputationMethod_.set (ForceComputationMethod_traits::create (i, f, this));
        continue;
      }
    }

    // bc_left
    //
    if (n.name () == "bc_left" && n.namespace_ ().empty ())
    {
      if (!bc_left_.present ())
      {
        this->bc_left_.set (bc_left_traits::create (i, f, this));
        continue;
      }
    }

    // bc_upper
    //
    if (n.name () == "bc_upper" && n.namespace_ ().empty ())
    {
      if (!bc_upper_.present ())
      {
        this->bc_upper_.set (bc_upper_traits::create (i, f, this));
        continue;
      }
    }

    // bc_right
    //
    if (n.name () == "bc_right" && n.namespace_ ().empty ())
    {
      if (!bc_right_.present ())
      {
        this->bc_right_.set (bc_right_traits::create (i, f, this));
        continue;
      }
    }

    // bc_lower
    //
    if (n.name () == "bc_lower" && n.namespace_ ().empty ())
    {
      if (!bc_lower_.present ())
      {
        this->bc_lower_.set (bc_lower_traits::create (i, f, this));
        continue;
      }
    }

    // bc_front
    //
    if (n.name () == "bc_front" && n.namespace_ ().empty ())
    {
      if (!bc_front_.present ())
      {
        this->bc_front_.set (bc_front_traits::create (i, f, this));
        continue;
      }
    }

    // bc_back
    //
    if (n.name () == "bc_back" && n.namespace_ ().empty ())
    {
      if (!bc_back_.present ())
      {
        this->bc_back_.set (bc_back_traits::create (i, f, this));
        continue;
      }
    }

    // inputfiles
    //
    if (n.name () == "inputfiles" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< inputfiles_type > r (
        inputfiles_traits::create (i, f, this));

      this->inputfiles_.push_back (::std::move (r));
      continue;
    }

    // thermostat
    //
    if (n.name () == "thermostat" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< thermostat_type > r (
        thermostat_traits::create (i, f, this));

      if (!this->thermostat_)
      {
        this->thermostat_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!outputname_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "outputname",
      "");
  }

  if (!frequency_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "frequency",
      "");
  }

  if (!delta_t_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "delta_t",
      "");
  }

  if (!t_end_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "t_end",
      "");
  }

  if (!b_factor_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "b_factor",
      "");
  }

  if (!g_grav_x_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "g_grav_x",
      "");
  }

  if (!g_grav_y_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "g_grav_y",
      "");
  }

  if (!g_grav_z_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "g_grav_z",
      "");
  }

  if (!domainX_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "domainX",
      "");
  }

  if (!domainY_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "domainY",
      "");
  }

  if (!domainZ_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "domainZ",
      "");
  }

  if (!r_cutoff_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "r_cutoff",
      "");
  }

  if (!bc_left_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "bc_left",
      "");
  }

  if (!bc_upper_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "bc_upper",
      "");
  }

  if (!bc_right_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "bc_right",
      "");
  }

  if (!bc_lower_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "bc_lower",
      "");
  }

  if (!bc_front_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "bc_front",
      "");
  }

  if (!bc_back_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "bc_back",
      "");
  }
}

setting_t* setting_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class setting_t (*this, f, c);
}

setting_t& setting_t::
operator= (const setting_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->outputname_ = x.outputname_;
    this->endfile_ = x.endfile_;
    this->frequency_ = x.frequency_;
    this->profileFile_ = x.profileFile_;
    this->profileBucketsX_ = x.profileBucketsX_;
    this->delta_t_ = x.delta_t_;
    this->t_end_ = x.t_end_;
    this->b_factor_ = x.b_factor_;
    this->g_grav_x_ = x.g_grav_x_;
    this->g_grav_y_ = x.g_grav_y_;
    this->g_grav_z_ = x.g_grav_z_;
    this->domainX_ = x.domainX_;
    this->domainY_ = x.domainY_;
    this->domainZ_ = x.domainZ_;
    this->r_cutoff_ = x.r_cutoff_;
    this->ContainerType_ = x.ContainerType_;
    this->ForceComputationMethod_ = x.ForceComputationMethod_;
    this->bc_left_ = x.bc_left_;
    this->bc_upper_ = x.bc_upper_;
    this->bc_right_ = x.bc_right_;
    this->bc_lower_ = x.bc_lower_;
    this->bc_front_ = x.bc_front_;
    this->bc_back_ = x.bc_back_;
    this->inputfiles_ = x.inputfiles_;
    this->thermostat_ = x.thermostat_;
  }

  return *this;
}

setting_t::
~setting_t ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::unique_ptr< ::setting_t >
setting (const ::std::string& u,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::setting_t > (
    ::setting (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::setting_t >
setting (const ::std::string& u,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::setting_t > (
    ::setting (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::setting_t >
setting (const ::std::string& u,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::setting_t > (
    ::setting (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::setting_t >
setting (::std::istream& is,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::setting (isrc, f, p);
}

::std::unique_ptr< ::setting_t >
setting (::std::istream& is,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::setting (isrc, h, f, p);
}

::std::unique_ptr< ::setting_t >
setting (::std::istream& is,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::setting (isrc, h, f, p);
}

::std::unique_ptr< ::setting_t >
setting (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::setting (isrc, f, p);
}

::std::unique_ptr< ::setting_t >
setting (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::setting (isrc, h, f, p);
}

::std::unique_ptr< ::setting_t >
setting (::std::istream& is,
         const ::std::string& sid,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::setting (isrc, h, f, p);
}

::std::unique_ptr< ::setting_t >
setting (::xercesc::InputSource& i,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::setting_t > (
    ::setting (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::setting_t >
setting (::xercesc::InputSource& i,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::setting_t > (
    ::setting (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::setting_t >
setting (::xercesc::InputSource& i,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::setting_t > (
    ::setting (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::setting_t >
setting (const ::xercesc::DOMDocument& doc,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::unique_ptr< ::setting_t > (
      ::setting (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "setting" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::setting_t > r (
      ::xsd::cxx::tree::traits< ::setting_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "setting",
    "");
}

::std::unique_ptr< ::setting_t >
setting (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
         ::xml_schema::flags f,
         const ::xml_schema::properties&)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "setting" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::setting_t > r (
      ::xsd::cxx::tree::traits< ::setting_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "setting",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

void
operator<< (::xercesc::DOMElement& e, const thermo_target_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // target
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "target",
        e));

    s << i.target ();
  }

  // temperature_step
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "temperature_step",
        e));

    s << i.temperature_step ();
  }

  // timestep
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "timestep",
        e));

    s << i.timestep ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const thermo_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // initial
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "initial",
        e));

    s << i.initial ();
  }

  // timestep
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "timestep",
        e));

    s << i.timestep ();
  }

  // heating
  //
  if (i.heating ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "heating",
        e));

    s << *i.heating ();
  }

  // ignoreY
  //
  if (i.ignoreY ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "ignoreY",
        e));

    s << *i.ignoreY ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const setting_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // outputname
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "outputname",
        e));

    s << i.outputname ();
  }

  // endfile
  //
  if (i.endfile ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "endfile",
        e));

    s << *i.endfile ();
  }

  // frequency
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "frequency",
        e));

    s << i.frequency ();
  }

  // profileFile
  //
  if (i.profileFile ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "profileFile",
        e));

    s << *i.profileFile ();
  }

  // profileBucketsX
  //
  if (i.profileBucketsX ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "profileBucketsX",
        e));

    s << *i.profileBucketsX ();
  }

  // delta_t
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "delta_t",
        e));

    s << i.delta_t ();
  }

  // t_end
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "t_end",
        e));

    s << i.t_end ();
  }

  // b_factor
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "b_factor",
        e));

    s << i.b_factor ();
  }

  // g_grav_x
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "g_grav_x",
        e));

    s << i.g_grav_x ();
  }

  // g_grav_y
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "g_grav_y",
        e));

    s << i.g_grav_y ();
  }

  // g_grav_z
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "g_grav_z",
        e));

    s << i.g_grav_z ();
  }

  // domainX
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "domainX",
        e));

    s << i.domainX ();
  }

  // domainY
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "domainY",
        e));

    s << i.domainY ();
  }

  // domainZ
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "domainZ",
        e));

    s << i.domainZ ();
  }

  // r_cutoff
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "r_cutoff",
        e));

    s << i.r_cutoff ();
  }

  // ContainerType
  //
  if (i.ContainerType ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "ContainerType",
        e));

    s << *i.ContainerType ();
  }

  // ForceComputationMethod
  //
  if (i.ForceComputationMethod ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "ForceComputationMethod",
        e));

    s << *i.ForceComputationMethod ();
  }

  // bc_left
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "bc_left",
        e));

    s << i.bc_left ();
  }

  // bc_upper
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "bc_upper",
        e));

    s << i.bc_upper ();
  }

  // bc_right
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "bc_right",
        e));

    s << i.bc_right ();
  }

  // bc_lower
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "bc_lower",
        e));

    s << i.bc_lower ();
  }

  // bc_front
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "bc_front",
        e));

    s << i.bc_front ();
  }

  // bc_back
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "bc_back",
        e));

    s << i.bc_back ();
  }

  // inputfiles
  //
  for (setting_t::inputfiles_const_iterator
       b (i.inputfiles ().begin ()), n (i.inputfiles ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "inputfiles",
        e));

    s << *b;
  }

  // thermostat
  //
  if (i.thermostat ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "thermostat",
        e));

    s << *i.thermostat ();
  }
}

void
setting (::std::ostream& o,
         const ::setting_t& s,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::setting (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
setting (::std::ostream& o,
         const ::setting_t& s,
         ::xml_schema::error_handler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::setting (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
setting (::std::ostream& o,
         const ::setting_t& s,
         ::xercesc::DOMErrorHandler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::setting (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
setting (::xercesc::XMLFormatTarget& t,
         const ::setting_t& s,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::setting (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
setting (::xercesc::XMLFormatTarget& t,
         const ::setting_t& s,
         ::xml_schema::error_handler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::setting (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
setting (::xercesc::XMLFormatTarget& t,
         const ::setting_t& s,
         ::xercesc::DOMErrorHandler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::setting (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
setting (::xercesc::DOMDocument& d,
         const ::setting_t& s,
         ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "setting" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "setting",
      "");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
setting (const ::setting_t& s,
         const ::xml_schema::namespace_infomap& m,
         ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "setting",
      "",
      m, f));

  ::setting (*d, s, f);
  return d;
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

