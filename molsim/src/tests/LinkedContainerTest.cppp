/*
 * LinkedContainerTest.cpp
 *
 *  Created on: Dec 04, 2017
 *      Author: jan
 */

#include "LinkedContainerTest.h"
#include "../mdutils.h"
#include "ParticleMS.h"
#include "utils/Vector.h"
#include <math.h>

LinkedContainerTest::LinkedContainerTest() {
	// TODO Auto-generated constructor stub

}


LinkedContainerTest::~LinkedContainerTest() {
	// TODO Auto-generated destructor stub
}
void LinkedContainerTest::setUp()
{
	ParticleType::setType(0, 1, 5, 1, 3.0, false);
	ParticleType::setType(1, 1, 5, 1, 3.0, false);
}


void LinkedContainerTest::addParticleTest(){
	LinkedCellsContainer testContainer(ParticleContainer::LennardJones, 0.014, 0.1, 3.0, 10, 10, 10, utils::Vector<int, 6>(1));

	Particle testPart(0);
	testContainer.addParticle(testPart);
	CPPUNIT_ASSERT(testContainer.getAll().size()==1);
	testContainer.addParticle(testPart);
	CPPUNIT_ASSERT(testContainer.getAll().size()==1);

}
void LinkedContainerTest::deleteParticleTest(){
	LinkedCellsContainer testContainer(ParticleContainer::LennardJones, 0.014, 0.1, 3.0, 10, 10, 10, utils::Vector<int, 6>(1));

	//create 2 particles test and desd
	Particle testPart(0);
	Particle desdPart(1);

	//add them both to the Container
	testContainer.addParticle(testPart);
	testContainer.addParticle(desdPart);

	CPPUNIT_ASSERT(testContainer.getAll().size()==2);

	//delete test
	testContainer.deleteParticle(testPart);

	CPPUNIT_ASSERT(testContainer.getAll().size()==1);

	//delete test again
	testContainer.deleteParticle(testPart);
	CPPUNIT_ASSERT(testContainer.getAll().size()==1);

	//now delete desd
	testContainer.deleteParticle(desdPart);
	CPPUNIT_ASSERT(testContainer.getAll().size()==0);

}

void LinkedContainerTest::outOfDomainTest(){
	LinkedCellsContainer testContainer(ParticleContainer::LennardJones, 0.014, 0.1, 3.0, 10, 10, 10, utils::Vector<int, 6>(1));

	Particle testPart(0);
	testPart.getX() = utils::Vector<double,3>(-1);
	testContainer.addParticle(testPart);

	CPPUNIT_ASSERT(testContainer.getAll().size()==0);
}

void LinkedContainerTest::boundaryForceTest(){
	LinkedCellsContainer testContainer(ParticleContainer::LennardJones, 0.014, 0.1, 3.0, 10, 10, 10, utils::Vector<int, 6>(1));

	Particle testPart(0);
	testPart.getX()[0] = 0.5;
	testPart.getX()[1] = 0.5;
	testContainer.addParticle(testPart);

	testContainer.calculateF();
	testPart = *testContainer.getAll().begin();

	CPPUNIT_ASSERT(testPart.getX()[0] > 0);
	CPPUNIT_ASSERT(testPart.getX()[1] > 0);
}

void LinkedContainerTest::boundaryTest(){
	LinkedCellsContainer testContainer(ParticleContainer::LennardJones, 0.014, 0.1, 3.0, 10, 10, 10, utils::Vector<int, 6>(1));

	Particle testPart(0);
	testContainer.addParticle(testPart);

	testPart.getX()[0] = 5;
	testPart.getX()[1] = 5;
	testContainer.addParticle(testPart);


	CPPUNIT_ASSERT(testContainer.getBoundary().size()==1);

}

void LinkedContainerTest::calculateFTest(){
	LinkedCellsContainer testContainer(ParticleContainer::LennardJones, 0.014, 0.1, 3.0, 10, 10, 10, utils::Vector<int, 6>(1));
	testContainer.setGravity(utils::Vector<double, 3>(0.0));

	//create 2 particles test and desd
	Particle testPart(0);
	Particle desdPart(1);

	//set their positions
	testPart.getX() = 3.0;
	desdPart.getX() = 4.0;

	// add to container
	testContainer.addParticle(testPart);
	testContainer.addParticle(desdPart);

	//compute force
	int epsilon = 5;
	int sigma = 1;
	utils::Vector<double,3> r = testPart.getX()-desdPart.getX();
	utils::Vector<double,3> f = -24*epsilon/(pow(r.L2Norm(),2))*(pow(sigma/r.L2Norm(),6)-2*pow(sigma/r.L2Norm(),12))*r;
	testContainer.calculateF();
	testContainer.calculateF();

	// refresh references
	std::list<Particle>::iterator it = testContainer.getAll().begin();
	testPart = *it;
	desdPart = *(++it);

	//test it
	CPPUNIT_ASSERT((testPart.getF()+desdPart.getF()).L2Norm() == 0);
	CPPUNIT_ASSERT((testPart.getF() - f).L2Norm() < 0.001);


}
