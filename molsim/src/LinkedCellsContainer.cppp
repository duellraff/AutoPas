/*
 * LinkedCellsContainer.cpp
 *
 *  Created on: Nov 27, 2017
 *      Author: raffi
 */


#include "LinkedCellsContainer.h"
#include "MaxwellBoltzmannDistribution.h"
#include <assert.h>
#include <omp.h>
#include <log4cxx/logger.h>

using namespace log4cxx;

static LoggerPtr logger(Logger::getLogger("LinkedCells"));

#define Dimensions 3
#define for_it(it, list) for (auto it = (list).begin(); it != (list).end(); it++)

/*LinkedCellsContainer::LinkedCellsContainer(enum ParticleContainer::ForceMethod fm, double timestep,
                                           double BrownianFactor,
										   double Rcutoff, double domainX, double domainY,double domainZ,
                                           utils::Vector<int, 6> boundary,
										   int threads)
		 : ParticleContainer(fm, timestep, BrownianFactor) {

	setDomain(domainX, domainY, domainZ);
	setMesh(Rcutoff,domainX, domainY, domainZ);
	BoundCond = boundary;

	// number of threads cannot exceed the half of the maximum dimension
	switch (MaxDim) {
	case 0: // x is maximum dimension
		if (threads > NcellsX / 2) {
			threads = NcellsX / 2;
		}
		break;
	case 1: // y is maximum dimension
		if (threads > NcellsY / 2) {
			threads = NcellsY / 2;
		}
		break;
	case 2: // z is maximum dimension
		if (threads > NcellsZ / 2) {
			threads = NcellsZ / 2;
		}
		break;
	}
	NumThreads=threads;
	LOG4CXX_INFO(logger, "Threads: " << threads);
}
*/
/*LinkedCellsContainer::~LinkedCellsContainer() {
	// TODO Auto-generated destructor stub
}*/

void LinkedCellsContainer::setGravity(utils::Vector<double,3> g) {
	for(int i=0; i<NcellsTot; ++i){
		celllist[i].setGravity(g);
	}
}

/*void LinkedCellsContainer::setDomain(double domainX, double domainY, double domainZ){
	lowerleft[0] = 0;
	lowerleft[1] = 0;
	lowerleft[2] = 0;

	upperright[0] = domainX;
	upperright[1] = domainY;
	upperright[2] = domainZ;
	LOG4CXX_DEBUG(logger, "Domain setted");

}*/

/*void LinkedCellsContainer::setMesh(double Rcut, double domainX, double domainY, double domainZ) {
	NcellsX = std::floor(domainX/Rcut);
	if (NcellsX == 0) {
		NcellsX = 1;
	}
	NcellsY = std::floor(domainY/Rcut);
	if (NcellsY == 0) {
		NcellsY = 1;
	}
	NcellsZ = std::floor(domainZ/Rcut);
	if (NcellsZ == 0) {
		NcellsZ = 1;
	}

	HcellsX = domainX/NcellsX;
	HcellsY = domainY/NcellsY;
	HcellsZ = domainZ/NcellsZ;

	//add halo cells
	NcellsX += 2;
	NcellsY += 2;
	NcellsZ += 2;

	NcellsXY = NcellsX * NcellsY;
	NcellsTot = NcellsXY * NcellsZ;

	for(int i=0; i<NcellsTot; ++i){
		celllist.push_back(ParticleContainer(fm, delta_t,BrownianFactor));
	}

	// get the dimension with highest number of cells
	MaxDim = 0;
	if (NcellsZ > NcellsX && NcellsZ > NcellsY) {
		MaxDim = 2;
	} else if (NcellsY > NcellsX) {
		MaxDim = 1;
	}

	LOG4CXX_INFO(logger, NcellsX << "x" << NcellsY << "x" << NcellsZ << " mesh setted!");
}*/

/*void LinkedCellsContainer::setMembrane(double stiff, double r_zero, bool status, double tend){
	// for all particles
	stiffness = stiff;
	r0 = r_zero;
	membrane_active = status;
	t_end_force = tend;

	for(int i=0; i<NcellsTot; ++i){
		celllist[i].setMembrane(stiff, r_zero, true, tend);
	}
}*/

/*void LinkedCellsContainer::setList(std::list<Particle> plist) {
	// clear container
	for(int i=0; i<celllist.size(); ++i){
		celllist[i].getAll().clear();
	}

	// fill container with all particles in plist
	for (Particle& p : plist){
		Particle* new_p = addParticle(p);
		if (membrane_active){
			p.actualiseNeighbours(new_p);
		}
	}
}*/


/*Particle* LinkedCellsContainer::addParticle(Particle& p){
	//get the position of the particle
	utils::Vector<double,3>& px = p.getX();

	//check if the particle is in the domain
	if ((px[0] < lowerleft[0]) || (px[0] > upperright[0]) ||
        (px[1] < lowerleft[1]) || (px[1] > upperright[1]) ||
		(px[2] < lowerleft[2]) || (px[2] > upperright[2])) {

		LOG4CXX_WARN(logger, "Particle at "<< px.toString() <<"is out of domain!");
		return nullptr;
	}

	//compute the position of the cell
	int ix = GET_X(px[0]);
	int iy = GET_Y(px[1]);
	int iz = GET_Z(px[2]);

	Particle* returnpart = celllist[ix+iy*NcellsX + iz*NcellsX*NcellsY].addParticle(p);

	LOG4CXX_TRACE(logger, "Particle added to cell!");

	return returnpart;
}*/

/*void LinkedCellsContainer::deleteParticle(Particle& p){
	// look for particle to remove
	for(int i=0; i<NcellsTot; ++i){
		for_it (it, celllist[i].getAll()){
			if (p == *it){
				// remove found particle
				celllist[i].getAll().erase(it);
				return;
			}
		}
	}
}*/

std::list<Particle>& LinkedCellsContainer::getAll(){

	partlist.clear();

	for (int i=0; i<NcellsTot; ++i){
		partlist.insert(partlist.end(),celllist[i].getAll().begin(),celllist[i].getAll().end());
	}

	LOG4CXX_TRACE(logger, "number of cells: "<<NcellsTot<<", number of elements to be plotted: "<<partlist.size());

	return partlist;
}

std::list<Particle*> LinkedCellsContainer::getAllPointer(){

	std::list<Particle*> pointers;
	for (int i=0; i<NcellsTot; ++i){
		for (Particle& p : celllist[i].getAll()) {
			pointers.push_back(&p);
		}
	}

	return pointers;
}

std::list<Particle>& LinkedCellsContainer::getBoundary(){

	partlist.clear();

	for (int i=0; i < NcellsTot; ++i){
		if (INDEX_X(i) == 1 || INDEX_X(i) == NcellsX - 2 ||
		    INDEX_Y(i) == 1 || INDEX_Y(i) == NcellsY - 2 ||
		    INDEX_Z(i) == 1 || INDEX_Z(i) == NcellsZ - 2) {

			partlist.insert(partlist.end(),celllist[i].getAll().begin(),celllist[i].getAll().end());
		}
	}

	LOG4CXX_DEBUG(logger, "number of elements in the boundary: "<<partlist.size());

	return partlist;
}

std::list<Particle>& LinkedCellsContainer::getHalo(){

	partlist.clear();

	for (int i=0; i < NcellsTot; ++i){
		if (INDEX_X(i) == 0 || INDEX_X(i) == NcellsX - 1 ||
			INDEX_Y(i) == 0 || INDEX_Y(i) == NcellsY - 1 ||
			INDEX_Z(i) == 0 || INDEX_Z(i) == NcellsZ - 1) {

			partlist.insert(partlist.end(),celllist[i].getAll().begin(),celllist[i].getAll().end());
		}
	}

	return partlist;
}

void LinkedCellsContainer::clearHalo(){

	for (int i=0; i < NcellsTot; ++i){
		if (INDEX_X(i) == 0 || INDEX_X(i) == NcellsX - 1 ||
			INDEX_Y(i) == 0 || INDEX_Y(i) == NcellsY - 1 ||
			INDEX_Z(i) == 0 || INDEX_Z(i) == NcellsZ - 1) {

			celllist[i].getAll().clear();
		}
	}
}

void LinkedCellsContainer::testForceEnd(double time){
	if (membrane_active && t_end_force < time){
		for(int i=0; i<NcellsTot; ++i){
			celllist[i].testForceEnd(time);
		}
	}
}

void LinkedCellsContainer::fReset(){
	// for all cells
	for(int i=0; i<NcellsTot; ++i){
		celllist[i].fReset();
	}
}

void LinkedCellsContainer::HarmonicPotential(){
	// for all cells
	for(int i=0; i<NcellsTot; ++i){
		celllist[i].HarmonicPotential(stiffness, r0);
	}
}

/*inline void FillPointer(std::vector<Particle*>& pointers, std::list<Particle>& particles) {
	for (Particle& p : particles) {
		pointers.push_back(&p);
	}
}*/

void LinkedCellsContainer::ReflectingBoundary(Particle& p, int i){

	double Hpart = p.getHpart();
	utils::Vector<double,3>& xorigin = p.getX();
	utils::Vector<double,3>& vorigin = p.getV();

	//check left boundary
	if (INDEX_X(i) == 1){
		if (BoundCond[0] == 1 && (xorigin[0] - lowerleft[0]) < Hpart) {
			utils::Vector<double,3> xhalo;
			xhalo[0] = 0;
			xhalo[1] = xorigin[1];
			xhalo[2] = xorigin[2];

			utils::Vector<double,3> vhalo;
			vhalo[0] = - vorigin[0];
			vhalo[1] = vorigin[1];
			vhalo[2] = vorigin[2];


			Particle pHalo = Particle(xhalo, vhalo, p.getType());

			utils::Vector<double, 3> fhalo = calcF(p, pHalo);
			p.getF() += fhalo;
		}
	}

	//check upper boundary
	if (INDEX_Y(i) == NcellsY-2){
		if (BoundCond[1] == 1 && (upperright[1] - xorigin[1]) < Hpart) {
			utils::Vector<double,3> xhalo;
			xhalo[0] = xorigin[0];
			xhalo[1] = upperright[1];
			xhalo[2] = xorigin[2];

			utils::Vector<double,3> vhalo;
			vhalo[0] = vorigin[0];
			vhalo[1] = - vorigin[1];
			vhalo[2] = vorigin[2];


			Particle pHalo = Particle(xhalo, vhalo, p.getType());

			utils::Vector<double, 3> fhalo = calcF(p, pHalo);
			p.getF() += fhalo;
		}
	}

	//check right boundary
	if (INDEX_X(i) == NcellsX - 2){
		if (BoundCond[2] == 1 && (upperright[0] - xorigin[0]) < Hpart) {
			utils::Vector<double,3> xhalo;
			xhalo[0] = upperright[0];
			xhalo[1] = xorigin[1];
			xhalo[2] = xorigin[2];

			utils::Vector<double,3> vhalo;
			vhalo[0] = - vorigin[0];
			vhalo[1] = vorigin[1];
			vhalo[2] = vorigin[2];


			Particle pHalo = Particle(xhalo, vhalo, p.getType());

			utils::Vector<double, 3> fhalo = calcF(p, pHalo);
			p.getF() += fhalo;
		}
	}


	//check lower boundary
	if (INDEX_Y(i) == 1){
		if (BoundCond[3] == 1 && (xorigin[1] - lowerleft[1]) < Hpart) {
			utils::Vector<double,3> xhalo;
			xhalo[0] = xorigin[0];
			xhalo[1] = 0;
			xhalo[2] = xorigin[2];

			utils::Vector<double,3> vhalo;
			vhalo[0] = vorigin[0];
			vhalo[1] = - vorigin[1];
			vhalo[2] = vorigin[2];


			Particle pHalo = Particle(xhalo, vhalo, p.getType());

			utils::Vector<double, 3> fhalo = calcF(p, pHalo);
			p.getF() += fhalo;
		}
	}


	//check front-side boundary
	if (INDEX_Z(i) == 1){
		if (BoundCond[4] == 1 && (xorigin[2] - lowerleft[2]) < Hpart) {
			utils::Vector<double,3> xhalo;
			xhalo[0] = xorigin[0];
			xhalo[1] = xorigin[1];
			xhalo[2] = lowerleft[2];

			utils::Vector<double,3> vhalo;
			vhalo[0] = vorigin[0];
			vhalo[1] = vorigin[1];
			vhalo[2] = - vorigin[2];


			Particle pHalo = Particle(xhalo, vhalo, p.getType());

			utils::Vector<double, 3> fhalo = calcF(p, pHalo);

			p.getF() += fhalo;
		}
	}

	//check back-side boundary
	if (INDEX_Z(i) == NcellsZ - 2){
		if (BoundCond[5] == 1 && (upperright[2] - xorigin[2]) < Hpart) {
			utils::Vector<double,3> xhalo;
			xhalo[0] = xorigin[0];
			xhalo[1] = xorigin[1];
			xhalo[2] = upperright[2];

			utils::Vector<double,3> vhalo;
			vhalo[0] = vorigin[0];
			vhalo[1] = vorigin[1];
			vhalo[2] = - vorigin[2];


			Particle pHalo = Particle(xhalo, vhalo, p.getType());

			utils::Vector<double, 3> fhalo = calcF(p, pHalo);

			p.getF() += fhalo;
		}
	}
}

void LinkedCellsContainer::PeriodicBoundary(){

	if (BoundCond[0] == 2) {

		//check left-right boundary (YZ  plane)
		for (int z=1; z < NcellsZ - 1; ++z){

			for (int y=1; y < NcellsY - 1; ++y){

				// copy from left to right
				int i = INDEX(1,y,z);
				std::list<Particle>& particles = celllist[i].getAll();
				for (Particle& p : particles){

					utils::Vector<double,3> xhalo = p.getX();

					xhalo[0] += upperright[0];

					Particle pHalo = Particle(xhalo, p.getV(), p.getType());
					celllist[i + NcellsX - 2].addParticle(pHalo);
				}

				// copy from right to left
				i = INDEX(NcellsX - 2, y, z);
				std::list<Particle>& particles2 = celllist[i].getAll();
				for (Particle& p : particles2){
					utils::Vector<double,3> xhalo = p.getX();

					xhalo[0] -= upperright[0];

					Particle pHalo = Particle(xhalo, p.getV(),  p.getType());
					celllist[i - NcellsX + 2].addParticle(pHalo);
				}
			}
		}
	}

	if (BoundCond[1] == 2) {
		//check up-lower boundary (XZ-plane)

		for (int z=1; z< NcellsZ; ++z){

			for (int x=0; x < NcellsX; ++x){

				// copy from lower to upper
				int i = INDEX(x, 1, z);
				std::list<Particle>& particles = celllist[i].getAll();
				for (Particle& p : particles){
					utils::Vector<double,3> xhalo=p.getX();

					xhalo[1] += upperright[1];

					Particle pHalo = Particle(xhalo, p.getV(), p.getType());
					celllist[INDEX(x, NcellsY - 1, z)].addParticle(pHalo);
				}

				// copy from upper to lower
				i = INDEX(x, NcellsY - 2, z);
				std::list<Particle>& particles2 = celllist[i].getAll();
				for (Particle& p : particles2){
					utils::Vector<double,3> xhalo=p.getX();
					xhalo[1] -= upperright[1];

					Particle pHalo = Particle(xhalo, p.getV(), p.getType());
					celllist[INDEX(x, 0, z)].addParticle(pHalo);
				}
			}
		}
	}

	if (BoundCond[4] == 2) {
		//check front-back boundary (XY-plane)
		for (int y=1; y< NcellsY; ++y){

			for (int x=0; x < NcellsX; ++x){

				// copy from front to back
				int i = INDEX(x, y, 1);
				std::list<Particle>& particles = celllist[i].getAll();
				for (Particle& p : particles){
					utils::Vector<double,3> xhalo=p.getX();

					xhalo[2] += upperright[2];

					Particle pHalo = Particle(xhalo, p.getV(), p.getType());
					celllist[INDEX(x, y, NcellsZ - 1)].addParticle(pHalo);
				}

				// copy from back to front
				i = INDEX(x, y, NcellsZ - 2);;
				std::list<Particle>& particles2 = celllist[i].getAll();
				for (Particle& p : particles2){
					utils::Vector<double,3> xhalo=p.getX();
					xhalo[2] -= upperright[2];

					Particle pHalo = Particle(xhalo, p.getV(), p.getType());
					celllist[INDEX(x, y, 0)].addParticle(pHalo);
				}
			}
		}
	}
}

void LinkedCellsContainer::calculateF() {
	LOG4CXX_TRACE(logger, "Calculate forces...");

	// set all forces to zero
	fReset();

	// create halo particles for periodic boundaries
	PeriodicBoundary();

	//compute the membrane forces
	if (membrane_active){
		HarmonicPotential();
	}

	if (NumThreads > 1)
	{
        int maxCells = MaxDim == 0 ? NcellsX : (MaxDim == 1 ? NcellsY - 1 : NcellsZ);
        int bounds[NumThreads+1];
        int remain = maxCells % NumThreads;
        int cellsPerThread = maxCells / NumThreads;

        bounds[0] = -1;
        for (int i = 1; i <= NumThreads; i++) {
                bounds[i] = bounds[i-1] + cellsPerThread + (i <= remain ?  1 : 0);
        }

		switch (MaxDim) {
		case 0: // x is maximum dimension
			#pragma omp parallel num_threads(NumThreads)
			{
					#pragma omp for
					for (int i = 0; i < NumThreads; i++) {
							//for all layers along the x-axis of that block but the last
							for (int x = bounds[i]+1; x < bounds[i+1]; x++) {
									for (int y = 0; y < NcellsY-1; y++) {
											for (int z = 0; z < NcellsZ; ++z){
													calculateForceForCell(x, y, z);
											}
									}
							}
					}
					#pragma omp for
					for (int i = 0; i < NumThreads; i++) {
							//for the last layer
							for (int y = 0; y < NcellsY-1; y++) {
									for (int z = 0; z < NcellsZ; ++z){
											calculateForceForCell(bounds[i+1], y, z);
									}
							}
					}
			}
			break;
		case 1: // y is maximum dimension
			#pragma omp parallel num_threads(NumThreads)
			{
					#pragma omp for
					for (int i = 0; i < NumThreads; i++) {
							//for all layers along the y-axis of that block but the last
							for (int y = bounds[i] + 1 ; y < bounds[i+1]; y++) {
									for (int x = 0; x < NcellsX; x++) {
											for (int z = 0; z < NcellsZ; ++z){
													calculateForceForCell(x, y, z);
											}
									}
							}
					}

					#pragma omp for
					for (int i = 0; i < NumThreads; i++) {
							//for the last layer
							for (int x = 0; x < NcellsX; x++) {
									for (int z = 0; z < NcellsZ; ++z){
											calculateForceForCell(x, bounds[i+1], z);
									}
							}
					}
			}
			break;

		case 2: // z is maximum dimension
			#pragma omp parallel num_threads(NumThreads)
			{
					#pragma omp for
					for (int i = 0; i < NumThreads; i++) {
							//for all layers along the z-axis of that block but the last
							for (int z = bounds[i] + 1; z < bounds[i+1]; ++z){
									for (int y = 0; y < NcellsY-1; y++) {
											for (int x = 0; x < NcellsX; x++) {
													calculateForceForCell(x, y, z);
											}
									}
							}
					}

					#pragma omp for
					for (int i = 0; i < NumThreads; i++) {
							//for the last layer
							for (int y = 0; y < NcellsY-1; y++) {
									for (int x = 0; x < NcellsX; x++) {
											calculateForceForCell(x, y, bounds[i+1]);
									}
							}
					}
			}
			break;
		}
	} else {
		// do not parallelize
		for (int x = 0; x < NcellsX; x++) {
			for (int y = 0; y < NcellsY-1; y++) {
				for (int z = 0; z < NcellsZ; ++z){
					calculateForceForCell(x, y, z);
				}
			}
		}
	}

	clearHalo();
}

void LinkedCellsContainer::calculateForceForCell(int x, int y, int z) {
	int i = INDEX(x, y, z);

	//create list nearby with all particles of the neighboring cells
	std::vector<Particle*> nearby;

	// add itself
	FillPointer(nearby, celllist[i].getAll());

	// add the particles of the actual layer
	// add top-left neighbor
	if(x != 0){
		FillPointer(nearby, celllist[i + NcellsX-1].getAll());
	}

	// add top neighbor
	FillPointer(nearby, celllist[i+NcellsX].getAll());

	// add top-right and right neighbor
	if(x != NcellsX - 1){
		FillPointer(nearby, celllist[i+NcellsX + 1].getAll());
		FillPointer(nearby, celllist[i+1].getAll());
	}

	//add the particles of the previous layer
	if(z != 0){
		// add front-top-left neighbor
		if(x != 0){
			FillPointer(nearby, celllist[i + NcellsX-1 - NcellsXY].getAll());
		}

		// add front-top neighbor
		FillPointer(nearby, celllist[i + NcellsX - NcellsXY].getAll());

		// add front-top-right and front-right neighbor
		if(x != NcellsX - 1){
			FillPointer(nearby, celllist[i+NcellsX + 1 - NcellsXY].getAll());
			FillPointer(nearby, celllist[i + 1 - NcellsXY].getAll());
		}
	}

	//add the particles of the next layer
	if(z != NcellsZ - 1){
		// add back-top-left neighbor
		if(x != 0){
			FillPointer(nearby, celllist[i + NcellsX-1 + NcellsXY].getAll());
		}

		// add back-top neighbor
		FillPointer(nearby, celllist[i + NcellsX + NcellsXY].getAll());

		// add back-top-right and back-right neighbor
		if(x != NcellsX - 1){
			FillPointer(nearby, celllist[i+NcellsX + 1 + NcellsXY].getAll());
			FillPointer(nearby, celllist[i + 1 + NcellsXY].getAll());
		}

		//add back neighbor
		FillPointer(nearby, celllist[i + NcellsXY].getAll());
	}


	LOG4CXX_TRACE(logger, "Cell number: " << i << ", size nearby: " << nearby.size());

	std::vector<Particle*>::iterator it1=nearby.begin();
	int size = celllist[i].getAll().size();
	for (int j=0; j < size; ++j,++it1){

		Particle& p1 = **it1;
		utils::Vector<double, 3>& p1x = p1.getX();
		utils::Vector<double, 3>& p1f = p1.getF();

		//apply eventual reflecting boundary conditions
		ReflectingBoundary(p1, i);

		std::vector<Particle*>::iterator it2 = it1;
		++it2;

		double rTruncSqr = p1.getRtruncLJ()*p1.getRtruncLJ();

		for(; it2 != nearby.end(); ++it2){
			Particle& p2= **it2;
			utils::Vector<double, 3>& p2x = p2.getX();
			utils::Vector<double, 3>& p2f = p2.getF();

			// Apply the occurring forces between both particles
			if((p1x-p2x).L2NormSqr() <= rTruncSqr){
				utils::Vector<double, 3> f = calcF(p1, p2);
				assert(!std::isnan(f[0]) && !std::isnan(f[1]) && !std::isnan(f[2]));

				p1f += f;
				p2f -= f;
			}
		}
	}
}

void LinkedCellsContainer::calculateX() {

	for (int i=0; i<NcellsTot; ++i){
		celllist[i].calculateX();
	}

	for (int i=0; i<NcellsTot; ++i){

		std::list<Particle>& particles = celllist[i].getAll();
		std::list<Particle>::iterator it = particles.begin();
		while (it != particles.end()) {
			Particle& p = *it;

			//check if the particle is out of the domain
			if (BoundCond[0] != 2 && ((p.getX()[0] < lowerleft[0]) || (p.getX()[0] > upperright[0]))) {
				//delete Particle (Outflow)
				if (membrane_active){
					Particle* NULLPART = nullptr;
					p.actualiseNeighbours(NULLPART);
				}
				it = particles.erase(it);
				LOG4CXX_DEBUG(logger, "Particle left the domain horizontally");
				continue;
			}

			if (BoundCond[1] != 2 && ((p.getX()[1] < lowerleft[1]) || (p.getX()[1] > upperright[1]))) {
			    //delete Particle (Outflow)
				if (membrane_active){
					Particle* NULLPART = nullptr;
					p.actualiseNeighbours(NULLPART);
				}
				it = particles.erase(it);
				LOG4CXX_DEBUG(logger, "Particle left the domain vertically");
				continue;
			}

			if (BoundCond[4] != 2 && ((p.getX()[2] < lowerleft[2]) || (p.getX()[2] > upperright[2]))) {
			    //delete Particle (Outflow)
				if (membrane_active){
					Particle* NULLPART = nullptr;
					p.actualiseNeighbours(NULLPART);
				}
				it = particles.erase(it);

				LOG4CXX_DEBUG(logger, "Particle left the domain by the front or the back");
				continue;
			}


			//compute the right cell
			utils::Vector<double, 3>& x = p.getX();
			//get the x-index of the cell
			int ix = GET_X(x[0]);
			//apply periodic boundaries
			if (ix == 0) {
				ix = NcellsX - 2;
				x[0] += upperright[0];
			} else if (ix == NcellsX - 1) {
				ix = 1;
				x[0] -= upperright[0];
			}

			//get the y-index of the cell
			int iy = GET_Y(x[1]);
			//apply periodic boundaries
			if (iy == 0) {
				iy = NcellsY - 2;
				x[1] += upperright[1];
			} else if (iy == NcellsY - 1) {
				iy = 1;
				x[1] -= upperright[1];
			}


			//get the z-index of the cell
			int iz = GET_Z(x[2]);
			//apply periodic boundaries
			if (iz == 0) {
				iz = NcellsZ - 2;
				x[2] += upperright[2];
			} else if (iz == NcellsZ - 1) {
				iz = 1;
				x[2] -= upperright[2];
			}

			int new_i = INDEX(ix, iy, iz);
			if (i != new_i){
				Particle* new_p = celllist[new_i].addParticle(p);
				if (membrane_active){
					p.actualiseNeighbours(new_p);
				}
				LOG4CXX_TRACE(logger, "particle changed from cell " << i << " to " << new_i);
				it = particles.erase(it);
			}
			else {
				LOG4CXX_TRACE(logger, "particle stays in cell");
				++it;
			}
		}
	}
}

void LinkedCellsContainer::calculateV() {
	for (int i=0; i<NcellsTot; ++i){
		celllist[i].calculateV();
	}
}
