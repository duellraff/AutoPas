/*
 * Particle.cpp
 *
 *  Created on: 23.02.2010
 *      Author: eckhardw
 */

#include "ParticleMS.h"

#include <sstream>
#include <iostream>

static log::Logger logg(log::Info, "../molsim");

ParticleMS::ParticleMS(int type_arg, long unsigned ParticleID) {
	ggrav = {0.0, 0.0, 0.0};
	type = type_arg;
	type_id = ParticleType::getID(type);
	_r = {0.0, 0.0, 0.0};
	_v = {0.0, 0.0, 0.0};
	_f = {0.0, 0.0, 0.0};
	old_f = {0.0, 0.0, 0.0};
	const_f = {0.0, 0.0, 0.0};
	_id = ParticleID;
	direct_neighbours={};
	diagonal_neighbours = {};
	logg.debug() <<"Particle generated!"<<std::endl;

}

ParticleMS::ParticleMS(const ParticleMS& other) {
	_r = other._r;
	_v = other._v;
	_f = other._f;
	_id = other._id;
	old_f = other.old_f;
	const_f = other.const_f;
	type = other.type;
	type_id = ParticleType::getID(type);
	ggrav = other.ggrav;
	direct_neighbours = other.direct_neighbours;
	diagonal_neighbours = other.diagonal_neighbours;
	logg.debug() <<"Particle generated by copy!"<<std::endl;
}

ParticleMS::ParticleMS(	std::array<double, 3> x_arg,
	        std::array<double, 3> v_arg,
	        int type_arg, long unsigned ParticleID) {
    _r = x_arg;
    _v = v_arg;
    _id = ParticleID;
    type = type_arg;
    type_id = ParticleType::getID(type);
    ggrav = {0.0, 0.0, 0.0};
    _f = {0.0, 0.0, 0.0};
    old_f = {0.0, 0.0, 0.0};
    const_f = {0.0, 0.0, 0.0};
	direct_neighbours={};
	diagonal_neighbours = {};
    logg.debug() <<"Particle generated!"<<std::endl;
}

ParticleMS::~ParticleMS() {

	logg.debug() <<"Particle destructed!"<<std::endl;
}

std::string ParticleMS::toString() {
	std::stringstream stream;
	stream << "Particle: X: " << _r[0]<<", "<<_r[1]<<", "<<_r[2]
				    << " v: " << _v[0]<<", "<<_v[1]<<", "<<_v[2]
					<< " f: " << _f[0]<<", "<<_f[1]<<", "<<_f[2]
					<< " old_f: " << old_f[0]<<", "<<old_f[1]<<", " << old_f[2]
					<< " type: " << type
					<< " ID: "<< _id;
	return stream.str();
}

void ParticleMS::actualiseNeighbours(ParticleMS* newptr){
	for (int i=0; i<4; i++){
		//find the particle to be deleted in the list of its neighbours
		if (direct_neighbours[i] != nullptr){
			direct_neighbours[i]->getDirectNeighbours()[(i+2)%4] = newptr;
		}

		if (diagonal_neighbours[i] != nullptr){
			diagonal_neighbours[i]->getDiagonalNeighbours()[(i+2)%4] = newptr;
		}
	}
}

bool ParticleMS::operator ==(ParticleMS& other) {
	if ( (_r == other._r) && (_v == other._v) && (_f == other._f) &&
			(type == other.type) && (old_f == other.old_f)) {
		return true;
	}

	return false;
}

std::ostream& operator<<(std::ostream& stream, ParticleMS& p) {
	stream << p.toString();
	return stream;
}
