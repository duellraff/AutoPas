// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "particle_input.h"

// vector_t
// 

const vector_t::x_type& vector_t::
x () const
{
  return this->x_.get ();
}

vector_t::x_type& vector_t::
x ()
{
  return this->x_.get ();
}

void vector_t::
x (const x_type& x)
{
  this->x_.set (x);
}

const vector_t::y_type& vector_t::
y () const
{
  return this->y_.get ();
}

vector_t::y_type& vector_t::
y ()
{
  return this->y_.get ();
}

void vector_t::
y (const y_type& x)
{
  this->y_.set (x);
}

const vector_t::z_type& vector_t::
z () const
{
  return this->z_.get ();
}

vector_t::z_type& vector_t::
z ()
{
  return this->z_.get ();
}

void vector_t::
z (const z_type& x)
{
  this->z_.set (x);
}


// int_vector_t
// 

const int_vector_t::x_type& int_vector_t::
x () const
{
  return this->x_.get ();
}

int_vector_t::x_type& int_vector_t::
x ()
{
  return this->x_.get ();
}

void int_vector_t::
x (const x_type& x)
{
  this->x_.set (x);
}

const int_vector_t::y_type& int_vector_t::
y () const
{
  return this->y_.get ();
}

int_vector_t::y_type& int_vector_t::
y ()
{
  return this->y_.get ();
}

void int_vector_t::
y (const y_type& x)
{
  this->y_.set (x);
}

const int_vector_t::z_type& int_vector_t::
z () const
{
  return this->z_.get ();
}

int_vector_t::z_type& int_vector_t::
z ()
{
  return this->z_.get ();
}

void int_vector_t::
z (const z_type& x)
{
  this->z_.set (x);
}


// particletype_t
// 

const particletype_t::id_type& particletype_t::
id () const
{
  return this->id_.get ();
}

particletype_t::id_type& particletype_t::
id ()
{
  return this->id_.get ();
}

void particletype_t::
id (const id_type& x)
{
  this->id_.set (x);
}

const particletype_t::mass_type& particletype_t::
mass () const
{
  return this->mass_.get ();
}

particletype_t::mass_type& particletype_t::
mass ()
{
  return this->mass_.get ();
}

void particletype_t::
mass (const mass_type& x)
{
  this->mass_.set (x);
}

const particletype_t::sigma_type& particletype_t::
sigma () const
{
  return this->sigma_.get ();
}

particletype_t::sigma_type& particletype_t::
sigma ()
{
  return this->sigma_.get ();
}

void particletype_t::
sigma (const sigma_type& x)
{
  this->sigma_.set (x);
}

const particletype_t::epsilon_type& particletype_t::
epsilon () const
{
  return this->epsilon_.get ();
}

particletype_t::epsilon_type& particletype_t::
epsilon ()
{
  return this->epsilon_.get ();
}

void particletype_t::
epsilon (const epsilon_type& x)
{
  this->epsilon_.set (x);
}

const particletype_t::fixed_optional& particletype_t::
fixed () const
{
  return this->fixed_;
}

particletype_t::fixed_optional& particletype_t::
fixed ()
{
  return this->fixed_;
}

void particletype_t::
fixed (const fixed_type& x)
{
  this->fixed_.set (x);
}

void particletype_t::
fixed (const fixed_optional& x)
{
  this->fixed_ = x;
}

const particletype_t::RtruncLJ_optional& particletype_t::
RtruncLJ () const
{
  return this->RtruncLJ_;
}

particletype_t::RtruncLJ_optional& particletype_t::
RtruncLJ ()
{
  return this->RtruncLJ_;
}

void particletype_t::
RtruncLJ (const RtruncLJ_type& x)
{
  this->RtruncLJ_.set (x);
}

void particletype_t::
RtruncLJ (const RtruncLJ_optional& x)
{
  this->RtruncLJ_ = x;
}


// single_t
// 

const single_t::coord_type& single_t::
coord () const
{
  return this->coord_.get ();
}

single_t::coord_type& single_t::
coord ()
{
  return this->coord_.get ();
}

void single_t::
coord (const coord_type& x)
{
  this->coord_.set (x);
}

void single_t::
coord (::std::unique_ptr< coord_type > x)
{
  this->coord_.set (std::move (x));
}

const single_t::force_optional& single_t::
force () const
{
  return this->force_;
}

single_t::force_optional& single_t::
force ()
{
  return this->force_;
}

void single_t::
force (const force_type& x)
{
  this->force_.set (x);
}

void single_t::
force (const force_optional& x)
{
  this->force_ = x;
}

void single_t::
force (::std::unique_ptr< force_type > x)
{
  this->force_.set (std::move (x));
}

const single_t::velocity_type& single_t::
velocity () const
{
  return this->velocity_.get ();
}

single_t::velocity_type& single_t::
velocity ()
{
  return this->velocity_.get ();
}

void single_t::
velocity (const velocity_type& x)
{
  this->velocity_.set (x);
}

void single_t::
velocity (::std::unique_ptr< velocity_type > x)
{
  this->velocity_.set (std::move (x));
}

const single_t::type_type& single_t::
type () const
{
  return this->type_.get ();
}

single_t::type_type& single_t::
type ()
{
  return this->type_.get ();
}

void single_t::
type (const type_type& x)
{
  this->type_.set (x);
}


// cuboid_t
// 

const cuboid_t::coord_type& cuboid_t::
coord () const
{
  return this->coord_.get ();
}

cuboid_t::coord_type& cuboid_t::
coord ()
{
  return this->coord_.get ();
}

void cuboid_t::
coord (const coord_type& x)
{
  this->coord_.set (x);
}

void cuboid_t::
coord (::std::unique_ptr< coord_type > x)
{
  this->coord_.set (std::move (x));
}

const cuboid_t::dimension_type& cuboid_t::
dimension () const
{
  return this->dimension_.get ();
}

cuboid_t::dimension_type& cuboid_t::
dimension ()
{
  return this->dimension_.get ();
}

void cuboid_t::
dimension (const dimension_type& x)
{
  this->dimension_.set (x);
}

void cuboid_t::
dimension (::std::unique_ptr< dimension_type > x)
{
  this->dimension_.set (std::move (x));
}

const cuboid_t::mesh_type& cuboid_t::
mesh () const
{
  return this->mesh_.get ();
}

cuboid_t::mesh_type& cuboid_t::
mesh ()
{
  return this->mesh_.get ();
}

void cuboid_t::
mesh (const mesh_type& x)
{
  this->mesh_.set (x);
}

const cuboid_t::velocity_type& cuboid_t::
velocity () const
{
  return this->velocity_.get ();
}

cuboid_t::velocity_type& cuboid_t::
velocity ()
{
  return this->velocity_.get ();
}

void cuboid_t::
velocity (const velocity_type& x)
{
  this->velocity_.set (x);
}

void cuboid_t::
velocity (::std::unique_ptr< velocity_type > x)
{
  this->velocity_.set (std::move (x));
}

const cuboid_t::type_type& cuboid_t::
type () const
{
  return this->type_.get ();
}

cuboid_t::type_type& cuboid_t::
type ()
{
  return this->type_.get ();
}

void cuboid_t::
type (const type_type& x)
{
  this->type_.set (x);
}


// membrane_t
// 

const membrane_t::stiffness_type& membrane_t::
stiffness () const
{
  return this->stiffness_.get ();
}

membrane_t::stiffness_type& membrane_t::
stiffness ()
{
  return this->stiffness_.get ();
}

void membrane_t::
stiffness (const stiffness_type& x)
{
  this->stiffness_.set (x);
}

const membrane_t::r_zero_type& membrane_t::
r_zero () const
{
  return this->r_zero_.get ();
}

membrane_t::r_zero_type& membrane_t::
r_zero ()
{
  return this->r_zero_.get ();
}

void membrane_t::
r_zero (const r_zero_type& x)
{
  this->r_zero_.set (x);
}

const membrane_t::force_optional& membrane_t::
force () const
{
  return this->force_;
}

membrane_t::force_optional& membrane_t::
force ()
{
  return this->force_;
}

void membrane_t::
force (const force_type& x)
{
  this->force_.set (x);
}

void membrane_t::
force (const force_optional& x)
{
  this->force_ = x;
}

void membrane_t::
force (::std::unique_ptr< force_type > x)
{
  this->force_.set (std::move (x));
}

const membrane_t::t_end_force_optional& membrane_t::
t_end_force () const
{
  return this->t_end_force_;
}

membrane_t::t_end_force_optional& membrane_t::
t_end_force ()
{
  return this->t_end_force_;
}

void membrane_t::
t_end_force (const t_end_force_type& x)
{
  this->t_end_force_.set (x);
}

void membrane_t::
t_end_force (const t_end_force_optional& x)
{
  this->t_end_force_ = x;
}

const membrane_t::coord_force_sequence& membrane_t::
coord_force () const
{
  return this->coord_force_;
}

membrane_t::coord_force_sequence& membrane_t::
coord_force ()
{
  return this->coord_force_;
}

void membrane_t::
coord_force (const coord_force_sequence& s)
{
  this->coord_force_ = s;
}

const membrane_t::coord_type& membrane_t::
coord () const
{
  return this->coord_.get ();
}

membrane_t::coord_type& membrane_t::
coord ()
{
  return this->coord_.get ();
}

void membrane_t::
coord (const coord_type& x)
{
  this->coord_.set (x);
}

void membrane_t::
coord (::std::unique_ptr< coord_type > x)
{
  this->coord_.set (std::move (x));
}

const membrane_t::dimension_type& membrane_t::
dimension () const
{
  return this->dimension_.get ();
}

membrane_t::dimension_type& membrane_t::
dimension ()
{
  return this->dimension_.get ();
}

void membrane_t::
dimension (const dimension_type& x)
{
  this->dimension_.set (x);
}

void membrane_t::
dimension (::std::unique_ptr< dimension_type > x)
{
  this->dimension_.set (std::move (x));
}

const membrane_t::mesh_type& membrane_t::
mesh () const
{
  return this->mesh_.get ();
}

membrane_t::mesh_type& membrane_t::
mesh ()
{
  return this->mesh_.get ();
}

void membrane_t::
mesh (const mesh_type& x)
{
  this->mesh_.set (x);
}

const membrane_t::velocity_type& membrane_t::
velocity () const
{
  return this->velocity_.get ();
}

membrane_t::velocity_type& membrane_t::
velocity ()
{
  return this->velocity_.get ();
}

void membrane_t::
velocity (const velocity_type& x)
{
  this->velocity_.set (x);
}

void membrane_t::
velocity (::std::unique_ptr< velocity_type > x)
{
  this->velocity_.set (std::move (x));
}

const membrane_t::type_type& membrane_t::
type () const
{
  return this->type_.get ();
}

membrane_t::type_type& membrane_t::
type ()
{
  return this->type_.get ();
}

void membrane_t::
type (const type_type& x)
{
  this->type_.set (x);
}


// sphere_t
// 

const sphere_t::coord_type& sphere_t::
coord () const
{
  return this->coord_.get ();
}

sphere_t::coord_type& sphere_t::
coord ()
{
  return this->coord_.get ();
}

void sphere_t::
coord (const coord_type& x)
{
  this->coord_.set (x);
}

void sphere_t::
coord (::std::unique_ptr< coord_type > x)
{
  this->coord_.set (std::move (x));
}

const sphere_t::radius_type& sphere_t::
radius () const
{
  return this->radius_.get ();
}

sphere_t::radius_type& sphere_t::
radius ()
{
  return this->radius_.get ();
}

void sphere_t::
radius (const radius_type& x)
{
  this->radius_.set (x);
}

const sphere_t::mesh_type& sphere_t::
mesh () const
{
  return this->mesh_.get ();
}

sphere_t::mesh_type& sphere_t::
mesh ()
{
  return this->mesh_.get ();
}

void sphere_t::
mesh (const mesh_type& x)
{
  this->mesh_.set (x);
}

const sphere_t::velocity_type& sphere_t::
velocity () const
{
  return this->velocity_.get ();
}

sphere_t::velocity_type& sphere_t::
velocity ()
{
  return this->velocity_.get ();
}

void sphere_t::
velocity (const velocity_type& x)
{
  this->velocity_.set (x);
}

void sphere_t::
velocity (::std::unique_ptr< velocity_type > x)
{
  this->velocity_.set (std::move (x));
}

const sphere_t::type_type& sphere_t::
type () const
{
  return this->type_.get ();
}

sphere_t::type_type& sphere_t::
type ()
{
  return this->type_.get ();
}

void sphere_t::
type (const type_type& x)
{
  this->type_.set (x);
}


// input_t
// 

const input_t::types_input_sequence& input_t::
types_input () const
{
  return this->types_input_;
}

input_t::types_input_sequence& input_t::
types_input ()
{
  return this->types_input_;
}

void input_t::
types_input (const types_input_sequence& s)
{
  this->types_input_ = s;
}

const input_t::single_input_sequence& input_t::
single_input () const
{
  return this->single_input_;
}

input_t::single_input_sequence& input_t::
single_input ()
{
  return this->single_input_;
}

void input_t::
single_input (const single_input_sequence& s)
{
  this->single_input_ = s;
}

const input_t::cuboid_input_sequence& input_t::
cuboid_input () const
{
  return this->cuboid_input_;
}

input_t::cuboid_input_sequence& input_t::
cuboid_input ()
{
  return this->cuboid_input_;
}

void input_t::
cuboid_input (const cuboid_input_sequence& s)
{
  this->cuboid_input_ = s;
}

const input_t::membrane_input_sequence& input_t::
membrane_input () const
{
  return this->membrane_input_;
}

input_t::membrane_input_sequence& input_t::
membrane_input ()
{
  return this->membrane_input_;
}

void input_t::
membrane_input (const membrane_input_sequence& s)
{
  this->membrane_input_ = s;
}

const input_t::sphere_input_sequence& input_t::
sphere_input () const
{
  return this->sphere_input_;
}

input_t::sphere_input_sequence& input_t::
sphere_input ()
{
  return this->sphere_input_;
}

void input_t::
sphere_input (const sphere_input_sequence& s)
{
  this->sphere_input_ = s;
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// vector_t
//

vector_t::
vector_t (const x_type& x,
          const y_type& y,
          const z_type& z)
: ::xml_schema::type (),
  x_ (x, this),
  y_ (y, this),
  z_ (z, this)
{
}

vector_t::
vector_t (const vector_t& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  x_ (x.x_, f, this),
  y_ (x.y_, f, this),
  z_ (x.z_, f, this)
{
}

vector_t::
vector_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  x_ (this),
  y_ (this),
  z_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void vector_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // x
    //
    if (n.name () == "x" && n.namespace_ ().empty ())
    {
      if (!x_.present ())
      {
        this->x_.set (x_traits::create (i, f, this));
        continue;
      }
    }

    // y
    //
    if (n.name () == "y" && n.namespace_ ().empty ())
    {
      if (!y_.present ())
      {
        this->y_.set (y_traits::create (i, f, this));
        continue;
      }
    }

    // z
    //
    if (n.name () == "z" && n.namespace_ ().empty ())
    {
      if (!z_.present ())
      {
        this->z_.set (z_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!x_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "x",
      "");
  }

  if (!y_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "y",
      "");
  }

  if (!z_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "z",
      "");
  }
}

vector_t* vector_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class vector_t (*this, f, c);
}

vector_t& vector_t::
operator= (const vector_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->x_ = x.x_;
    this->y_ = x.y_;
    this->z_ = x.z_;
  }

  return *this;
}

vector_t::
~vector_t ()
{
}

// int_vector_t
//

int_vector_t::
int_vector_t (const x_type& x,
              const y_type& y,
              const z_type& z)
: ::xml_schema::type (),
  x_ (x, this),
  y_ (y, this),
  z_ (z, this)
{
}

int_vector_t::
int_vector_t (const int_vector_t& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  x_ (x.x_, f, this),
  y_ (x.y_, f, this),
  z_ (x.z_, f, this)
{
}

int_vector_t::
int_vector_t (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  x_ (this),
  y_ (this),
  z_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void int_vector_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // x
    //
    if (n.name () == "x" && n.namespace_ ().empty ())
    {
      if (!x_.present ())
      {
        this->x_.set (x_traits::create (i, f, this));
        continue;
      }
    }

    // y
    //
    if (n.name () == "y" && n.namespace_ ().empty ())
    {
      if (!y_.present ())
      {
        this->y_.set (y_traits::create (i, f, this));
        continue;
      }
    }

    // z
    //
    if (n.name () == "z" && n.namespace_ ().empty ())
    {
      if (!z_.present ())
      {
        this->z_.set (z_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!x_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "x",
      "");
  }

  if (!y_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "y",
      "");
  }

  if (!z_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "z",
      "");
  }
}

int_vector_t* int_vector_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class int_vector_t (*this, f, c);
}

int_vector_t& int_vector_t::
operator= (const int_vector_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->x_ = x.x_;
    this->y_ = x.y_;
    this->z_ = x.z_;
  }

  return *this;
}

int_vector_t::
~int_vector_t ()
{
}

// particletype_t
//

particletype_t::
particletype_t (const id_type& id,
                const mass_type& mass,
                const sigma_type& sigma,
                const epsilon_type& epsilon)
: ::xml_schema::type (),
  id_ (id, this),
  mass_ (mass, this),
  sigma_ (sigma, this),
  epsilon_ (epsilon, this),
  fixed_ (this),
  RtruncLJ_ (this)
{
}

particletype_t::
particletype_t (const particletype_t& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  id_ (x.id_, f, this),
  mass_ (x.mass_, f, this),
  sigma_ (x.sigma_, f, this),
  epsilon_ (x.epsilon_, f, this),
  fixed_ (x.fixed_, f, this),
  RtruncLJ_ (x.RtruncLJ_, f, this)
{
}

particletype_t::
particletype_t (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  id_ (this),
  mass_ (this),
  sigma_ (this),
  epsilon_ (this),
  fixed_ (this),
  RtruncLJ_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void particletype_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // id
    //
    if (n.name () == "id" && n.namespace_ ().empty ())
    {
      if (!id_.present ())
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }
    }

    // mass
    //
    if (n.name () == "mass" && n.namespace_ ().empty ())
    {
      if (!mass_.present ())
      {
        this->mass_.set (mass_traits::create (i, f, this));
        continue;
      }
    }

    // sigma
    //
    if (n.name () == "sigma" && n.namespace_ ().empty ())
    {
      if (!sigma_.present ())
      {
        this->sigma_.set (sigma_traits::create (i, f, this));
        continue;
      }
    }

    // epsilon
    //
    if (n.name () == "epsilon" && n.namespace_ ().empty ())
    {
      if (!epsilon_.present ())
      {
        this->epsilon_.set (epsilon_traits::create (i, f, this));
        continue;
      }
    }

    // fixed
    //
    if (n.name () == "fixed" && n.namespace_ ().empty ())
    {
      if (!this->fixed_)
      {
        this->fixed_.set (fixed_traits::create (i, f, this));
        continue;
      }
    }

    // RtruncLJ
    //
    if (n.name () == "RtruncLJ" && n.namespace_ ().empty ())
    {
      if (!this->RtruncLJ_)
      {
        this->RtruncLJ_.set (RtruncLJ_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!id_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "id",
      "");
  }

  if (!mass_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "mass",
      "");
  }

  if (!sigma_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "sigma",
      "");
  }

  if (!epsilon_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "epsilon",
      "");
  }
}

particletype_t* particletype_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class particletype_t (*this, f, c);
}

particletype_t& particletype_t::
operator= (const particletype_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->id_ = x.id_;
    this->mass_ = x.mass_;
    this->sigma_ = x.sigma_;
    this->epsilon_ = x.epsilon_;
    this->fixed_ = x.fixed_;
    this->RtruncLJ_ = x.RtruncLJ_;
  }

  return *this;
}

particletype_t::
~particletype_t ()
{
}

// single_t
//

single_t::
single_t (const coord_type& coord,
          const velocity_type& velocity,
          const type_type& type)
: ::xml_schema::type (),
  coord_ (coord, this),
  force_ (this),
  velocity_ (velocity, this),
  type_ (type, this)
{
}

single_t::
single_t (::std::unique_ptr< coord_type > coord,
          ::std::unique_ptr< velocity_type > velocity,
          const type_type& type)
: ::xml_schema::type (),
  coord_ (std::move (coord), this),
  force_ (this),
  velocity_ (std::move (velocity), this),
  type_ (type, this)
{
}

single_t::
single_t (const single_t& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  coord_ (x.coord_, f, this),
  force_ (x.force_, f, this),
  velocity_ (x.velocity_, f, this),
  type_ (x.type_, f, this)
{
}

single_t::
single_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  coord_ (this),
  force_ (this),
  velocity_ (this),
  type_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void single_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // coord
    //
    if (n.name () == "coord" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< coord_type > r (
        coord_traits::create (i, f, this));

      if (!coord_.present ())
      {
        this->coord_.set (::std::move (r));
        continue;
      }
    }

    // force
    //
    if (n.name () == "force" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< force_type > r (
        force_traits::create (i, f, this));

      if (!this->force_)
      {
        this->force_.set (::std::move (r));
        continue;
      }
    }

    // velocity
    //
    if (n.name () == "velocity" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< velocity_type > r (
        velocity_traits::create (i, f, this));

      if (!velocity_.present ())
      {
        this->velocity_.set (::std::move (r));
        continue;
      }
    }

    // type
    //
    if (n.name () == "type" && n.namespace_ ().empty ())
    {
      if (!type_.present ())
      {
        this->type_.set (type_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!coord_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "coord",
      "");
  }

  if (!velocity_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "velocity",
      "");
  }

  if (!type_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "type",
      "");
  }
}

single_t* single_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class single_t (*this, f, c);
}

single_t& single_t::
operator= (const single_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->coord_ = x.coord_;
    this->force_ = x.force_;
    this->velocity_ = x.velocity_;
    this->type_ = x.type_;
  }

  return *this;
}

single_t::
~single_t ()
{
}

// cuboid_t
//

cuboid_t::
cuboid_t (const coord_type& coord,
          const dimension_type& dimension,
          const mesh_type& mesh,
          const velocity_type& velocity,
          const type_type& type)
: ::xml_schema::type (),
  coord_ (coord, this),
  dimension_ (dimension, this),
  mesh_ (mesh, this),
  velocity_ (velocity, this),
  type_ (type, this)
{
}

cuboid_t::
cuboid_t (::std::unique_ptr< coord_type > coord,
          ::std::unique_ptr< dimension_type > dimension,
          const mesh_type& mesh,
          ::std::unique_ptr< velocity_type > velocity,
          const type_type& type)
: ::xml_schema::type (),
  coord_ (std::move (coord), this),
  dimension_ (std::move (dimension), this),
  mesh_ (mesh, this),
  velocity_ (std::move (velocity), this),
  type_ (type, this)
{
}

cuboid_t::
cuboid_t (const cuboid_t& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  coord_ (x.coord_, f, this),
  dimension_ (x.dimension_, f, this),
  mesh_ (x.mesh_, f, this),
  velocity_ (x.velocity_, f, this),
  type_ (x.type_, f, this)
{
}

cuboid_t::
cuboid_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  coord_ (this),
  dimension_ (this),
  mesh_ (this),
  velocity_ (this),
  type_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void cuboid_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // coord
    //
    if (n.name () == "coord" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< coord_type > r (
        coord_traits::create (i, f, this));

      if (!coord_.present ())
      {
        this->coord_.set (::std::move (r));
        continue;
      }
    }

    // dimension
    //
    if (n.name () == "dimension" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< dimension_type > r (
        dimension_traits::create (i, f, this));

      if (!dimension_.present ())
      {
        this->dimension_.set (::std::move (r));
        continue;
      }
    }

    // mesh
    //
    if (n.name () == "mesh" && n.namespace_ ().empty ())
    {
      if (!mesh_.present ())
      {
        this->mesh_.set (mesh_traits::create (i, f, this));
        continue;
      }
    }

    // velocity
    //
    if (n.name () == "velocity" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< velocity_type > r (
        velocity_traits::create (i, f, this));

      if (!velocity_.present ())
      {
        this->velocity_.set (::std::move (r));
        continue;
      }
    }

    // type
    //
    if (n.name () == "type" && n.namespace_ ().empty ())
    {
      if (!type_.present ())
      {
        this->type_.set (type_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!coord_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "coord",
      "");
  }

  if (!dimension_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "dimension",
      "");
  }

  if (!mesh_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "mesh",
      "");
  }

  if (!velocity_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "velocity",
      "");
  }

  if (!type_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "type",
      "");
  }
}

cuboid_t* cuboid_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class cuboid_t (*this, f, c);
}

cuboid_t& cuboid_t::
operator= (const cuboid_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->coord_ = x.coord_;
    this->dimension_ = x.dimension_;
    this->mesh_ = x.mesh_;
    this->velocity_ = x.velocity_;
    this->type_ = x.type_;
  }

  return *this;
}

cuboid_t::
~cuboid_t ()
{
}

// membrane_t
//

membrane_t::
membrane_t (const stiffness_type& stiffness,
            const r_zero_type& r_zero,
            const coord_type& coord,
            const dimension_type& dimension,
            const mesh_type& mesh,
            const velocity_type& velocity,
            const type_type& type)
: ::xml_schema::type (),
  stiffness_ (stiffness, this),
  r_zero_ (r_zero, this),
  force_ (this),
  t_end_force_ (this),
  coord_force_ (this),
  coord_ (coord, this),
  dimension_ (dimension, this),
  mesh_ (mesh, this),
  velocity_ (velocity, this),
  type_ (type, this)
{
}

membrane_t::
membrane_t (const stiffness_type& stiffness,
            const r_zero_type& r_zero,
            ::std::unique_ptr< coord_type > coord,
            ::std::unique_ptr< dimension_type > dimension,
            const mesh_type& mesh,
            ::std::unique_ptr< velocity_type > velocity,
            const type_type& type)
: ::xml_schema::type (),
  stiffness_ (stiffness, this),
  r_zero_ (r_zero, this),
  force_ (this),
  t_end_force_ (this),
  coord_force_ (this),
  coord_ (std::move (coord), this),
  dimension_ (std::move (dimension), this),
  mesh_ (mesh, this),
  velocity_ (std::move (velocity), this),
  type_ (type, this)
{
}

membrane_t::
membrane_t (const membrane_t& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  stiffness_ (x.stiffness_, f, this),
  r_zero_ (x.r_zero_, f, this),
  force_ (x.force_, f, this),
  t_end_force_ (x.t_end_force_, f, this),
  coord_force_ (x.coord_force_, f, this),
  coord_ (x.coord_, f, this),
  dimension_ (x.dimension_, f, this),
  mesh_ (x.mesh_, f, this),
  velocity_ (x.velocity_, f, this),
  type_ (x.type_, f, this)
{
}

membrane_t::
membrane_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  stiffness_ (this),
  r_zero_ (this),
  force_ (this),
  t_end_force_ (this),
  coord_force_ (this),
  coord_ (this),
  dimension_ (this),
  mesh_ (this),
  velocity_ (this),
  type_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void membrane_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // stiffness
    //
    if (n.name () == "stiffness" && n.namespace_ ().empty ())
    {
      if (!stiffness_.present ())
      {
        this->stiffness_.set (stiffness_traits::create (i, f, this));
        continue;
      }
    }

    // r_zero
    //
    if (n.name () == "r_zero" && n.namespace_ ().empty ())
    {
      if (!r_zero_.present ())
      {
        this->r_zero_.set (r_zero_traits::create (i, f, this));
        continue;
      }
    }

    // force
    //
    if (n.name () == "force" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< force_type > r (
        force_traits::create (i, f, this));

      if (!this->force_)
      {
        this->force_.set (::std::move (r));
        continue;
      }
    }

    // t_end_force
    //
    if (n.name () == "t_end_force" && n.namespace_ ().empty ())
    {
      if (!this->t_end_force_)
      {
        this->t_end_force_.set (t_end_force_traits::create (i, f, this));
        continue;
      }
    }

    // coord_force
    //
    if (n.name () == "coord_force" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< coord_force_type > r (
        coord_force_traits::create (i, f, this));

      this->coord_force_.push_back (::std::move (r));
      continue;
    }

    // coord
    //
    if (n.name () == "coord" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< coord_type > r (
        coord_traits::create (i, f, this));

      if (!coord_.present ())
      {
        this->coord_.set (::std::move (r));
        continue;
      }
    }

    // dimension
    //
    if (n.name () == "dimension" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< dimension_type > r (
        dimension_traits::create (i, f, this));

      if (!dimension_.present ())
      {
        this->dimension_.set (::std::move (r));
        continue;
      }
    }

    // mesh
    //
    if (n.name () == "mesh" && n.namespace_ ().empty ())
    {
      if (!mesh_.present ())
      {
        this->mesh_.set (mesh_traits::create (i, f, this));
        continue;
      }
    }

    // velocity
    //
    if (n.name () == "velocity" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< velocity_type > r (
        velocity_traits::create (i, f, this));

      if (!velocity_.present ())
      {
        this->velocity_.set (::std::move (r));
        continue;
      }
    }

    // type
    //
    if (n.name () == "type" && n.namespace_ ().empty ())
    {
      if (!type_.present ())
      {
        this->type_.set (type_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!stiffness_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "stiffness",
      "");
  }

  if (!r_zero_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "r_zero",
      "");
  }

  if (!coord_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "coord",
      "");
  }

  if (!dimension_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "dimension",
      "");
  }

  if (!mesh_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "mesh",
      "");
  }

  if (!velocity_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "velocity",
      "");
  }

  if (!type_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "type",
      "");
  }
}

membrane_t* membrane_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class membrane_t (*this, f, c);
}

membrane_t& membrane_t::
operator= (const membrane_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->stiffness_ = x.stiffness_;
    this->r_zero_ = x.r_zero_;
    this->force_ = x.force_;
    this->t_end_force_ = x.t_end_force_;
    this->coord_force_ = x.coord_force_;
    this->coord_ = x.coord_;
    this->dimension_ = x.dimension_;
    this->mesh_ = x.mesh_;
    this->velocity_ = x.velocity_;
    this->type_ = x.type_;
  }

  return *this;
}

membrane_t::
~membrane_t ()
{
}

// sphere_t
//

sphere_t::
sphere_t (const coord_type& coord,
          const radius_type& radius,
          const mesh_type& mesh,
          const velocity_type& velocity,
          const type_type& type)
: ::xml_schema::type (),
  coord_ (coord, this),
  radius_ (radius, this),
  mesh_ (mesh, this),
  velocity_ (velocity, this),
  type_ (type, this)
{
}

sphere_t::
sphere_t (::std::unique_ptr< coord_type > coord,
          const radius_type& radius,
          const mesh_type& mesh,
          ::std::unique_ptr< velocity_type > velocity,
          const type_type& type)
: ::xml_schema::type (),
  coord_ (std::move (coord), this),
  radius_ (radius, this),
  mesh_ (mesh, this),
  velocity_ (std::move (velocity), this),
  type_ (type, this)
{
}

sphere_t::
sphere_t (const sphere_t& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  coord_ (x.coord_, f, this),
  radius_ (x.radius_, f, this),
  mesh_ (x.mesh_, f, this),
  velocity_ (x.velocity_, f, this),
  type_ (x.type_, f, this)
{
}

sphere_t::
sphere_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  coord_ (this),
  radius_ (this),
  mesh_ (this),
  velocity_ (this),
  type_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void sphere_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // coord
    //
    if (n.name () == "coord" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< coord_type > r (
        coord_traits::create (i, f, this));

      if (!coord_.present ())
      {
        this->coord_.set (::std::move (r));
        continue;
      }
    }

    // radius
    //
    if (n.name () == "radius" && n.namespace_ ().empty ())
    {
      if (!radius_.present ())
      {
        this->radius_.set (radius_traits::create (i, f, this));
        continue;
      }
    }

    // mesh
    //
    if (n.name () == "mesh" && n.namespace_ ().empty ())
    {
      if (!mesh_.present ())
      {
        this->mesh_.set (mesh_traits::create (i, f, this));
        continue;
      }
    }

    // velocity
    //
    if (n.name () == "velocity" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< velocity_type > r (
        velocity_traits::create (i, f, this));

      if (!velocity_.present ())
      {
        this->velocity_.set (::std::move (r));
        continue;
      }
    }

    // type
    //
    if (n.name () == "type" && n.namespace_ ().empty ())
    {
      if (!type_.present ())
      {
        this->type_.set (type_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!coord_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "coord",
      "");
  }

  if (!radius_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "radius",
      "");
  }

  if (!mesh_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "mesh",
      "");
  }

  if (!velocity_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "velocity",
      "");
  }

  if (!type_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "type",
      "");
  }
}

sphere_t* sphere_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class sphere_t (*this, f, c);
}

sphere_t& sphere_t::
operator= (const sphere_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->coord_ = x.coord_;
    this->radius_ = x.radius_;
    this->mesh_ = x.mesh_;
    this->velocity_ = x.velocity_;
    this->type_ = x.type_;
  }

  return *this;
}

sphere_t::
~sphere_t ()
{
}

// input_t
//

input_t::
input_t ()
: ::xml_schema::type (),
  types_input_ (this),
  single_input_ (this),
  cuboid_input_ (this),
  membrane_input_ (this),
  sphere_input_ (this)
{
}

input_t::
input_t (const input_t& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  types_input_ (x.types_input_, f, this),
  single_input_ (x.single_input_, f, this),
  cuboid_input_ (x.cuboid_input_, f, this),
  membrane_input_ (x.membrane_input_, f, this),
  sphere_input_ (x.sphere_input_, f, this)
{
}

input_t::
input_t (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  types_input_ (this),
  single_input_ (this),
  cuboid_input_ (this),
  membrane_input_ (this),
  sphere_input_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void input_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // types_input
    //
    if (n.name () == "types_input" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< types_input_type > r (
        types_input_traits::create (i, f, this));

      this->types_input_.push_back (::std::move (r));
      continue;
    }

    // single_input
    //
    if (n.name () == "single_input" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< single_input_type > r (
        single_input_traits::create (i, f, this));

      this->single_input_.push_back (::std::move (r));
      continue;
    }

    // cuboid_input
    //
    if (n.name () == "cuboid_input" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< cuboid_input_type > r (
        cuboid_input_traits::create (i, f, this));

      this->cuboid_input_.push_back (::std::move (r));
      continue;
    }

    // membrane_input
    //
    if (n.name () == "membrane_input" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< membrane_input_type > r (
        membrane_input_traits::create (i, f, this));

      this->membrane_input_.push_back (::std::move (r));
      continue;
    }

    // sphere_input
    //
    if (n.name () == "sphere_input" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< sphere_input_type > r (
        sphere_input_traits::create (i, f, this));

      this->sphere_input_.push_back (::std::move (r));
      continue;
    }

    break;
  }
}

input_t* input_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class input_t (*this, f, c);
}

input_t& input_t::
operator= (const input_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->types_input_ = x.types_input_;
    this->single_input_ = x.single_input_;
    this->cuboid_input_ = x.cuboid_input_;
    this->membrane_input_ = x.membrane_input_;
    this->sphere_input_ = x.sphere_input_;
  }

  return *this;
}

input_t::
~input_t ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::unique_ptr< ::input_t >
particle_input (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::input_t > (
    ::particle_input (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::input_t >
particle_input (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::input_t > (
    ::particle_input (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::input_t >
particle_input (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::input_t > (
    ::particle_input (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::input_t >
particle_input (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::particle_input (isrc, f, p);
}

::std::unique_ptr< ::input_t >
particle_input (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::particle_input (isrc, h, f, p);
}

::std::unique_ptr< ::input_t >
particle_input (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::particle_input (isrc, h, f, p);
}

::std::unique_ptr< ::input_t >
particle_input (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::particle_input (isrc, f, p);
}

::std::unique_ptr< ::input_t >
particle_input (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::particle_input (isrc, h, f, p);
}

::std::unique_ptr< ::input_t >
particle_input (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::particle_input (isrc, h, f, p);
}

::std::unique_ptr< ::input_t >
particle_input (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::input_t > (
    ::particle_input (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::input_t >
particle_input (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::input_t > (
    ::particle_input (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::input_t >
particle_input (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::input_t > (
    ::particle_input (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::input_t >
particle_input (const ::xercesc::DOMDocument& doc,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::unique_ptr< ::input_t > (
      ::particle_input (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "particle_input" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::input_t > r (
      ::xsd::cxx::tree::traits< ::input_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "particle_input",
    "");
}

::std::unique_ptr< ::input_t >
particle_input (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "particle_input" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::input_t > r (
      ::xsd::cxx::tree::traits< ::input_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "particle_input",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

void
operator<< (::xercesc::DOMElement& e, const vector_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // x
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "x",
        e));

    s << i.x ();
  }

  // y
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "y",
        e));

    s << i.y ();
  }

  // z
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "z",
        e));

    s << i.z ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const int_vector_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // x
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "x",
        e));

    s << i.x ();
  }

  // y
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "y",
        e));

    s << i.y ();
  }

  // z
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "z",
        e));

    s << i.z ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const particletype_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // id
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "id",
        e));

    s << i.id ();
  }

  // mass
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "mass",
        e));

    s << i.mass ();
  }

  // sigma
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "sigma",
        e));

    s << i.sigma ();
  }

  // epsilon
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "epsilon",
        e));

    s << i.epsilon ();
  }

  // fixed
  //
  if (i.fixed ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "fixed",
        e));

    s << *i.fixed ();
  }

  // RtruncLJ
  //
  if (i.RtruncLJ ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "RtruncLJ",
        e));

    s << ::xml_schema::as_double(*i.RtruncLJ ());
  }
}

void
operator<< (::xercesc::DOMElement& e, const single_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // coord
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "coord",
        e));

    s << i.coord ();
  }

  // force
  //
  if (i.force ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "force",
        e));

    s << *i.force ();
  }

  // velocity
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "velocity",
        e));

    s << i.velocity ();
  }

  // type
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "type",
        e));

    s << i.type ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const cuboid_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // coord
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "coord",
        e));

    s << i.coord ();
  }

  // dimension
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "dimension",
        e));

    s << i.dimension ();
  }

  // mesh
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "mesh",
        e));

    s << i.mesh ();
  }

  // velocity
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "velocity",
        e));

    s << i.velocity ();
  }

  // type
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "type",
        e));

    s << i.type ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const membrane_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // stiffness
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "stiffness",
        e));

    s << ::xml_schema::as_double(i.stiffness ());
  }

  // r_zero
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "r_zero",
        e));

    s << ::xml_schema::as_double(i.r_zero ());
  }

  // force
  //
  if (i.force ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "force",
        e));

    s << *i.force ();
  }

  // t_end_force
  //
  if (i.t_end_force ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "t_end_force",
        e));

    s << ::xml_schema::as_double(*i.t_end_force ());
  }

  // coord_force
  //
  for (membrane_t::coord_force_const_iterator
       b (i.coord_force ().begin ()), n (i.coord_force ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "coord_force",
        e));

    s << *b;
  }

  // coord
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "coord",
        e));

    s << i.coord ();
  }

  // dimension
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "dimension",
        e));

    s << i.dimension ();
  }

  // mesh
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "mesh",
        e));

    s << i.mesh ();
  }

  // velocity
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "velocity",
        e));

    s << i.velocity ();
  }

  // type
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "type",
        e));

    s << i.type ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const sphere_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // coord
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "coord",
        e));

    s << i.coord ();
  }

  // radius
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "radius",
        e));

    s << i.radius ();
  }

  // mesh
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "mesh",
        e));

    s << i.mesh ();
  }

  // velocity
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "velocity",
        e));

    s << i.velocity ();
  }

  // type
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "type",
        e));

    s << i.type ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const input_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // types_input
  //
  for (input_t::types_input_const_iterator
       b (i.types_input ().begin ()), n (i.types_input ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "types_input",
        e));

    s << *b;
  }

  // single_input
  //
  for (input_t::single_input_const_iterator
       b (i.single_input ().begin ()), n (i.single_input ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "single_input",
        e));

    s << *b;
  }

  // cuboid_input
  //
  for (input_t::cuboid_input_const_iterator
       b (i.cuboid_input ().begin ()), n (i.cuboid_input ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "cuboid_input",
        e));

    s << *b;
  }

  // membrane_input
  //
  for (input_t::membrane_input_const_iterator
       b (i.membrane_input ().begin ()), n (i.membrane_input ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "membrane_input",
        e));

    s << *b;
  }

  // sphere_input
  //
  for (input_t::sphere_input_const_iterator
       b (i.sphere_input ().begin ()), n (i.sphere_input ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "sphere_input",
        e));

    s << *b;
  }
}

void
particle_input (::std::ostream& o,
                const ::input_t& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::particle_input (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
particle_input (::std::ostream& o,
                const ::input_t& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::particle_input (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
particle_input (::std::ostream& o,
                const ::input_t& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::particle_input (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
particle_input (::xercesc::XMLFormatTarget& t,
                const ::input_t& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::particle_input (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
particle_input (::xercesc::XMLFormatTarget& t,
                const ::input_t& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::particle_input (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
particle_input (::xercesc::XMLFormatTarget& t,
                const ::input_t& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::particle_input (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
particle_input (::xercesc::DOMDocument& d,
                const ::input_t& s,
                ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "particle_input" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "particle_input",
      "");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
particle_input (const ::input_t& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "particle_input",
      "",
      m, f));

  ::particle_input (*d, s, f);
  return d;
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

