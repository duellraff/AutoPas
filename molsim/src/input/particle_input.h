// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef PARTICLE_INPUT_H
#define PARTICLE_INPUT_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class vector_t;
class int_vector_t;
class particletype_t;
class single_t;
class cuboid_t;
class membrane_t;
class sphere_t;
class input_t;

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class vector_t: public ::xml_schema::type
{
  public:
  // x
  //
  typedef ::xml_schema::float_ x_type;
  typedef ::xsd::cxx::tree::traits< x_type, char > x_traits;

  const x_type&
  x () const;

  x_type&
  x ();

  void
  x (const x_type& x);

  // y
  //
  typedef ::xml_schema::float_ y_type;
  typedef ::xsd::cxx::tree::traits< y_type, char > y_traits;

  const y_type&
  y () const;

  y_type&
  y ();

  void
  y (const y_type& x);

  // z
  //
  typedef ::xml_schema::float_ z_type;
  typedef ::xsd::cxx::tree::traits< z_type, char > z_traits;

  const z_type&
  z () const;

  z_type&
  z ();

  void
  z (const z_type& x);

  // Constructors.
  //
  vector_t (const x_type&,
            const y_type&,
            const z_type&);

  vector_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  vector_t (const vector_t& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual vector_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  vector_t&
  operator= (const vector_t& x);

  virtual 
  ~vector_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< x_type > x_;
  ::xsd::cxx::tree::one< y_type > y_;
  ::xsd::cxx::tree::one< z_type > z_;
};

class int_vector_t: public ::xml_schema::type
{
  public:
  // x
  //
  typedef ::xml_schema::int_ x_type;
  typedef ::xsd::cxx::tree::traits< x_type, char > x_traits;

  const x_type&
  x () const;

  x_type&
  x ();

  void
  x (const x_type& x);

  // y
  //
  typedef ::xml_schema::int_ y_type;
  typedef ::xsd::cxx::tree::traits< y_type, char > y_traits;

  const y_type&
  y () const;

  y_type&
  y ();

  void
  y (const y_type& x);

  // z
  //
  typedef ::xml_schema::int_ z_type;
  typedef ::xsd::cxx::tree::traits< z_type, char > z_traits;

  const z_type&
  z () const;

  z_type&
  z ();

  void
  z (const z_type& x);

  // Constructors.
  //
  int_vector_t (const x_type&,
                const y_type&,
                const z_type&);

  int_vector_t (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  int_vector_t (const int_vector_t& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual int_vector_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  int_vector_t&
  operator= (const int_vector_t& x);

  virtual 
  ~int_vector_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< x_type > x_;
  ::xsd::cxx::tree::one< y_type > y_;
  ::xsd::cxx::tree::one< z_type > z_;
};

class particletype_t: public ::xml_schema::type
{
  public:
  // id
  //
  typedef ::xml_schema::int_ id_type;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_type&
  id () const;

  id_type&
  id ();

  void
  id (const id_type& x);

  // mass
  //
  typedef ::xml_schema::float_ mass_type;
  typedef ::xsd::cxx::tree::traits< mass_type, char > mass_traits;

  const mass_type&
  mass () const;

  mass_type&
  mass ();

  void
  mass (const mass_type& x);

  // sigma
  //
  typedef ::xml_schema::float_ sigma_type;
  typedef ::xsd::cxx::tree::traits< sigma_type, char > sigma_traits;

  const sigma_type&
  sigma () const;

  sigma_type&
  sigma ();

  void
  sigma (const sigma_type& x);

  // epsilon
  //
  typedef ::xml_schema::float_ epsilon_type;
  typedef ::xsd::cxx::tree::traits< epsilon_type, char > epsilon_traits;

  const epsilon_type&
  epsilon () const;

  epsilon_type&
  epsilon ();

  void
  epsilon (const epsilon_type& x);

  // fixed
  //
  typedef ::xml_schema::boolean fixed_type;
  typedef ::xsd::cxx::tree::optional< fixed_type > fixed_optional;
  typedef ::xsd::cxx::tree::traits< fixed_type, char > fixed_traits;

  const fixed_optional&
  fixed () const;

  fixed_optional&
  fixed ();

  void
  fixed (const fixed_type& x);

  void
  fixed (const fixed_optional& x);

  // RtruncLJ
  //
  typedef ::xml_schema::double_ RtruncLJ_type;
  typedef ::xsd::cxx::tree::optional< RtruncLJ_type > RtruncLJ_optional;
  typedef ::xsd::cxx::tree::traits< RtruncLJ_type, char, ::xsd::cxx::tree::schema_type::double_ > RtruncLJ_traits;

  const RtruncLJ_optional&
  RtruncLJ () const;

  RtruncLJ_optional&
  RtruncLJ ();

  void
  RtruncLJ (const RtruncLJ_type& x);

  void
  RtruncLJ (const RtruncLJ_optional& x);

  // Constructors.
  //
  particletype_t (const id_type&,
                  const mass_type&,
                  const sigma_type&,
                  const epsilon_type&);

  particletype_t (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  particletype_t (const particletype_t& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual particletype_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  particletype_t&
  operator= (const particletype_t& x);

  virtual 
  ~particletype_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< id_type > id_;
  ::xsd::cxx::tree::one< mass_type > mass_;
  ::xsd::cxx::tree::one< sigma_type > sigma_;
  ::xsd::cxx::tree::one< epsilon_type > epsilon_;
  fixed_optional fixed_;
  RtruncLJ_optional RtruncLJ_;
};

class single_t: public ::xml_schema::type
{
  public:
  // coord
  //
  typedef ::vector_t coord_type;
  typedef ::xsd::cxx::tree::traits< coord_type, char > coord_traits;

  const coord_type&
  coord () const;

  coord_type&
  coord ();

  void
  coord (const coord_type& x);

  void
  coord (::std::unique_ptr< coord_type > p);

  // force
  //
  typedef ::vector_t force_type;
  typedef ::xsd::cxx::tree::optional< force_type > force_optional;
  typedef ::xsd::cxx::tree::traits< force_type, char > force_traits;

  const force_optional&
  force () const;

  force_optional&
  force ();

  void
  force (const force_type& x);

  void
  force (const force_optional& x);

  void
  force (::std::unique_ptr< force_type > p);

  // velocity
  //
  typedef ::vector_t velocity_type;
  typedef ::xsd::cxx::tree::traits< velocity_type, char > velocity_traits;

  const velocity_type&
  velocity () const;

  velocity_type&
  velocity ();

  void
  velocity (const velocity_type& x);

  void
  velocity (::std::unique_ptr< velocity_type > p);

  // type
  //
  typedef ::xml_schema::int_ type_type;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_type&
  type () const;

  type_type&
  type ();

  void
  type (const type_type& x);

  // Constructors.
  //
  single_t (const coord_type&,
            const velocity_type&,
            const type_type&);

  single_t (::std::unique_ptr< coord_type >,
            ::std::unique_ptr< velocity_type >,
            const type_type&);

  single_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  single_t (const single_t& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual single_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  single_t&
  operator= (const single_t& x);

  virtual 
  ~single_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< coord_type > coord_;
  force_optional force_;
  ::xsd::cxx::tree::one< velocity_type > velocity_;
  ::xsd::cxx::tree::one< type_type > type_;
};

class cuboid_t: public ::xml_schema::type
{
  public:
  // coord
  //
  typedef ::vector_t coord_type;
  typedef ::xsd::cxx::tree::traits< coord_type, char > coord_traits;

  const coord_type&
  coord () const;

  coord_type&
  coord ();

  void
  coord (const coord_type& x);

  void
  coord (::std::unique_ptr< coord_type > p);

  // dimension
  //
  typedef ::int_vector_t dimension_type;
  typedef ::xsd::cxx::tree::traits< dimension_type, char > dimension_traits;

  const dimension_type&
  dimension () const;

  dimension_type&
  dimension ();

  void
  dimension (const dimension_type& x);

  void
  dimension (::std::unique_ptr< dimension_type > p);

  // mesh
  //
  typedef ::xml_schema::float_ mesh_type;
  typedef ::xsd::cxx::tree::traits< mesh_type, char > mesh_traits;

  const mesh_type&
  mesh () const;

  mesh_type&
  mesh ();

  void
  mesh (const mesh_type& x);

  // velocity
  //
  typedef ::vector_t velocity_type;
  typedef ::xsd::cxx::tree::traits< velocity_type, char > velocity_traits;

  const velocity_type&
  velocity () const;

  velocity_type&
  velocity ();

  void
  velocity (const velocity_type& x);

  void
  velocity (::std::unique_ptr< velocity_type > p);

  // type
  //
  typedef ::xml_schema::int_ type_type;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_type&
  type () const;

  type_type&
  type ();

  void
  type (const type_type& x);

  // Constructors.
  //
  cuboid_t (const coord_type&,
            const dimension_type&,
            const mesh_type&,
            const velocity_type&,
            const type_type&);

  cuboid_t (::std::unique_ptr< coord_type >,
            ::std::unique_ptr< dimension_type >,
            const mesh_type&,
            ::std::unique_ptr< velocity_type >,
            const type_type&);

  cuboid_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  cuboid_t (const cuboid_t& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual cuboid_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  cuboid_t&
  operator= (const cuboid_t& x);

  virtual 
  ~cuboid_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< coord_type > coord_;
  ::xsd::cxx::tree::one< dimension_type > dimension_;
  ::xsd::cxx::tree::one< mesh_type > mesh_;
  ::xsd::cxx::tree::one< velocity_type > velocity_;
  ::xsd::cxx::tree::one< type_type > type_;
};

class membrane_t: public ::xml_schema::type
{
  public:
  // stiffness
  //
  typedef ::xml_schema::double_ stiffness_type;
  typedef ::xsd::cxx::tree::traits< stiffness_type, char, ::xsd::cxx::tree::schema_type::double_ > stiffness_traits;

  const stiffness_type&
  stiffness () const;

  stiffness_type&
  stiffness ();

  void
  stiffness (const stiffness_type& x);

  // r_zero
  //
  typedef ::xml_schema::double_ r_zero_type;
  typedef ::xsd::cxx::tree::traits< r_zero_type, char, ::xsd::cxx::tree::schema_type::double_ > r_zero_traits;

  const r_zero_type&
  r_zero () const;

  r_zero_type&
  r_zero ();

  void
  r_zero (const r_zero_type& x);

  // force
  //
  typedef ::vector_t force_type;
  typedef ::xsd::cxx::tree::optional< force_type > force_optional;
  typedef ::xsd::cxx::tree::traits< force_type, char > force_traits;

  const force_optional&
  force () const;

  force_optional&
  force ();

  void
  force (const force_type& x);

  void
  force (const force_optional& x);

  void
  force (::std::unique_ptr< force_type > p);

  // t_end_force
  //
  typedef ::xml_schema::double_ t_end_force_type;
  typedef ::xsd::cxx::tree::optional< t_end_force_type > t_end_force_optional;
  typedef ::xsd::cxx::tree::traits< t_end_force_type, char, ::xsd::cxx::tree::schema_type::double_ > t_end_force_traits;

  const t_end_force_optional&
  t_end_force () const;

  t_end_force_optional&
  t_end_force ();

  void
  t_end_force (const t_end_force_type& x);

  void
  t_end_force (const t_end_force_optional& x);

  // coord_force
  //
  typedef ::int_vector_t coord_force_type;
  typedef ::xsd::cxx::tree::sequence< coord_force_type > coord_force_sequence;
  typedef coord_force_sequence::iterator coord_force_iterator;
  typedef coord_force_sequence::const_iterator coord_force_const_iterator;
  typedef ::xsd::cxx::tree::traits< coord_force_type, char > coord_force_traits;

  const coord_force_sequence&
  coord_force () const;

  coord_force_sequence&
  coord_force ();

  void
  coord_force (const coord_force_sequence& s);

  // coord
  //
  typedef ::vector_t coord_type;
  typedef ::xsd::cxx::tree::traits< coord_type, char > coord_traits;

  const coord_type&
  coord () const;

  coord_type&
  coord ();

  void
  coord (const coord_type& x);

  void
  coord (::std::unique_ptr< coord_type > p);

  // dimension
  //
  typedef ::int_vector_t dimension_type;
  typedef ::xsd::cxx::tree::traits< dimension_type, char > dimension_traits;

  const dimension_type&
  dimension () const;

  dimension_type&
  dimension ();

  void
  dimension (const dimension_type& x);

  void
  dimension (::std::unique_ptr< dimension_type > p);

  // mesh
  //
  typedef ::xml_schema::float_ mesh_type;
  typedef ::xsd::cxx::tree::traits< mesh_type, char > mesh_traits;

  const mesh_type&
  mesh () const;

  mesh_type&
  mesh ();

  void
  mesh (const mesh_type& x);

  // velocity
  //
  typedef ::vector_t velocity_type;
  typedef ::xsd::cxx::tree::traits< velocity_type, char > velocity_traits;

  const velocity_type&
  velocity () const;

  velocity_type&
  velocity ();

  void
  velocity (const velocity_type& x);

  void
  velocity (::std::unique_ptr< velocity_type > p);

  // type
  //
  typedef ::xml_schema::int_ type_type;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_type&
  type () const;

  type_type&
  type ();

  void
  type (const type_type& x);

  // Constructors.
  //
  membrane_t (const stiffness_type&,
              const r_zero_type&,
              const coord_type&,
              const dimension_type&,
              const mesh_type&,
              const velocity_type&,
              const type_type&);

  membrane_t (const stiffness_type&,
              const r_zero_type&,
              ::std::unique_ptr< coord_type >,
              ::std::unique_ptr< dimension_type >,
              const mesh_type&,
              ::std::unique_ptr< velocity_type >,
              const type_type&);

  membrane_t (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  membrane_t (const membrane_t& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual membrane_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  membrane_t&
  operator= (const membrane_t& x);

  virtual 
  ~membrane_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< stiffness_type > stiffness_;
  ::xsd::cxx::tree::one< r_zero_type > r_zero_;
  force_optional force_;
  t_end_force_optional t_end_force_;
  coord_force_sequence coord_force_;
  ::xsd::cxx::tree::one< coord_type > coord_;
  ::xsd::cxx::tree::one< dimension_type > dimension_;
  ::xsd::cxx::tree::one< mesh_type > mesh_;
  ::xsd::cxx::tree::one< velocity_type > velocity_;
  ::xsd::cxx::tree::one< type_type > type_;
};

class sphere_t: public ::xml_schema::type
{
  public:
  // coord
  //
  typedef ::vector_t coord_type;
  typedef ::xsd::cxx::tree::traits< coord_type, char > coord_traits;

  const coord_type&
  coord () const;

  coord_type&
  coord ();

  void
  coord (const coord_type& x);

  void
  coord (::std::unique_ptr< coord_type > p);

  // radius
  //
  typedef ::xml_schema::int_ radius_type;
  typedef ::xsd::cxx::tree::traits< radius_type, char > radius_traits;

  const radius_type&
  radius () const;

  radius_type&
  radius ();

  void
  radius (const radius_type& x);

  // mesh
  //
  typedef ::xml_schema::float_ mesh_type;
  typedef ::xsd::cxx::tree::traits< mesh_type, char > mesh_traits;

  const mesh_type&
  mesh () const;

  mesh_type&
  mesh ();

  void
  mesh (const mesh_type& x);

  // velocity
  //
  typedef ::vector_t velocity_type;
  typedef ::xsd::cxx::tree::traits< velocity_type, char > velocity_traits;

  const velocity_type&
  velocity () const;

  velocity_type&
  velocity ();

  void
  velocity (const velocity_type& x);

  void
  velocity (::std::unique_ptr< velocity_type > p);

  // type
  //
  typedef ::xml_schema::int_ type_type;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_type&
  type () const;

  type_type&
  type ();

  void
  type (const type_type& x);

  // Constructors.
  //
  sphere_t (const coord_type&,
            const radius_type&,
            const mesh_type&,
            const velocity_type&,
            const type_type&);

  sphere_t (::std::unique_ptr< coord_type >,
            const radius_type&,
            const mesh_type&,
            ::std::unique_ptr< velocity_type >,
            const type_type&);

  sphere_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  sphere_t (const sphere_t& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual sphere_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  sphere_t&
  operator= (const sphere_t& x);

  virtual 
  ~sphere_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< coord_type > coord_;
  ::xsd::cxx::tree::one< radius_type > radius_;
  ::xsd::cxx::tree::one< mesh_type > mesh_;
  ::xsd::cxx::tree::one< velocity_type > velocity_;
  ::xsd::cxx::tree::one< type_type > type_;
};

class input_t: public ::xml_schema::type
{
  public:
  // types_input
  //
  typedef ::particletype_t types_input_type;
  typedef ::xsd::cxx::tree::sequence< types_input_type > types_input_sequence;
  typedef types_input_sequence::iterator types_input_iterator;
  typedef types_input_sequence::const_iterator types_input_const_iterator;
  typedef ::xsd::cxx::tree::traits< types_input_type, char > types_input_traits;

  const types_input_sequence&
  types_input () const;

  types_input_sequence&
  types_input ();

  void
  types_input (const types_input_sequence& s);

  // single_input
  //
  typedef ::single_t single_input_type;
  typedef ::xsd::cxx::tree::sequence< single_input_type > single_input_sequence;
  typedef single_input_sequence::iterator single_input_iterator;
  typedef single_input_sequence::const_iterator single_input_const_iterator;
  typedef ::xsd::cxx::tree::traits< single_input_type, char > single_input_traits;

  const single_input_sequence&
  single_input () const;

  single_input_sequence&
  single_input ();

  void
  single_input (const single_input_sequence& s);

  // cuboid_input
  //
  typedef ::cuboid_t cuboid_input_type;
  typedef ::xsd::cxx::tree::sequence< cuboid_input_type > cuboid_input_sequence;
  typedef cuboid_input_sequence::iterator cuboid_input_iterator;
  typedef cuboid_input_sequence::const_iterator cuboid_input_const_iterator;
  typedef ::xsd::cxx::tree::traits< cuboid_input_type, char > cuboid_input_traits;

  const cuboid_input_sequence&
  cuboid_input () const;

  cuboid_input_sequence&
  cuboid_input ();

  void
  cuboid_input (const cuboid_input_sequence& s);

  // membrane_input
  //
  typedef ::membrane_t membrane_input_type;
  typedef ::xsd::cxx::tree::sequence< membrane_input_type > membrane_input_sequence;
  typedef membrane_input_sequence::iterator membrane_input_iterator;
  typedef membrane_input_sequence::const_iterator membrane_input_const_iterator;
  typedef ::xsd::cxx::tree::traits< membrane_input_type, char > membrane_input_traits;

  const membrane_input_sequence&
  membrane_input () const;

  membrane_input_sequence&
  membrane_input ();

  void
  membrane_input (const membrane_input_sequence& s);

  // sphere_input
  //
  typedef ::sphere_t sphere_input_type;
  typedef ::xsd::cxx::tree::sequence< sphere_input_type > sphere_input_sequence;
  typedef sphere_input_sequence::iterator sphere_input_iterator;
  typedef sphere_input_sequence::const_iterator sphere_input_const_iterator;
  typedef ::xsd::cxx::tree::traits< sphere_input_type, char > sphere_input_traits;

  const sphere_input_sequence&
  sphere_input () const;

  sphere_input_sequence&
  sphere_input ();

  void
  sphere_input (const sphere_input_sequence& s);

  // Constructors.
  //
  input_t ();

  input_t (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  input_t (const input_t& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual input_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  input_t&
  operator= (const input_t& x);

  virtual 
  ~input_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  types_input_sequence types_input_;
  single_input_sequence single_input_;
  cuboid_input_sequence cuboid_input_;
  membrane_input_sequence membrane_input_;
  sphere_input_sequence sphere_input_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::unique_ptr< ::input_t >
particle_input (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::input_t >
particle_input (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::input_t >
particle_input (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::unique_ptr< ::input_t >
particle_input (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::input_t >
particle_input (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::input_t >
particle_input (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::input_t >
particle_input (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::input_t >
particle_input (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::input_t >
particle_input (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::unique_ptr< ::input_t >
particle_input (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::input_t >
particle_input (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::input_t >
particle_input (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::unique_ptr< ::input_t >
particle_input (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::input_t >
particle_input (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

void
operator<< (::xercesc::DOMElement&, const vector_t&);

void
operator<< (::xercesc::DOMElement&, const int_vector_t&);

void
operator<< (::xercesc::DOMElement&, const particletype_t&);

void
operator<< (::xercesc::DOMElement&, const single_t&);

void
operator<< (::xercesc::DOMElement&, const cuboid_t&);

void
operator<< (::xercesc::DOMElement&, const membrane_t&);

void
operator<< (::xercesc::DOMElement&, const sphere_t&);

void
operator<< (::xercesc::DOMElement&, const input_t&);

// Serialize to std::ostream.
//

void
particle_input (::std::ostream& os,
                const ::input_t& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

void
particle_input (::std::ostream& os,
                const ::input_t& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

void
particle_input (::std::ostream& os,
                const ::input_t& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
particle_input (::xercesc::XMLFormatTarget& ft,
                const ::input_t& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

void
particle_input (::xercesc::XMLFormatTarget& ft,
                const ::input_t& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

void
particle_input (::xercesc::XMLFormatTarget& ft,
                const ::input_t& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
particle_input (::xercesc::DOMDocument& d,
                const ::input_t& x,
                ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
particle_input (const ::input_t& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                ::xml_schema::flags f = 0);

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // PARTICLE_INPUT_H
